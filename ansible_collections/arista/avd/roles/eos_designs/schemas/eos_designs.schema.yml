$id: eos_designs
type: dict
allow_other_keys: true
keys:
  avd_data_conversion_mode:
    type: str
    valid_values:
    - disabled
    - error
    - warning
    - info
    - debug
    - quiet
    default: debug
    description: 'Conversion Mode for AVD input data conversion.

      Input data conversion will perform type conversion of input variables as defined
      in the schema.

      The type conversion is intended to help the user to identify minor issues with
      the input data, while still allowing the data to be validated.

      During conversion, messages will generated with information about the host(s)
      and key(s) which required conversion.

      "disabled" means that conversion will not run - avoid this since conversion
      is also handling data deprecation and upgrade.

      "error" will produce error messages and fail the task.

      "warning" will produce warning messages.

      "info" will produce regular log messages.

      "debug" will produce hidden debug messages viewable with -v.

      "quiet" will not produce any messages'
  avd_data_validation_mode:
    type: str
    valid_values:
    - disabled
    - error
    - warning
    - info
    - debug
    default: warning
    description: 'Validation Mode for AVD input data validation.

      Input data validation will validate the input variables according to the schema.

      During validation, messages will generated with information about the host(s)
      and key(s) which failed validation.

      "disabled" means that validation will not run.

      "error" will produce error messages and fail the task.

      "warning" will produce warning messages.

      "info" will produce regular log messages.

      "debug" will produce hidden debug messages viewable with -v.'
  bfd_multihop:
    type: dict
    description: BFD Multihop tuning
    keys:
      interval:
        type: int
        convert_types:
        - str
        default: 300
        min: 50
        max: 60000
      min_rx:
        type: int
        convert_types:
        - str
        default: 300
        min: 50
        max: 60000
      multiplier:
        type: int
        convert_types:
        - str
        default: 3
        min: 3
        max: 50
  bgp_as:
    description: AS number to use to configure overlay when "overlay_routing_protocol"
      == ibgp
    type: str
    convert_types:
    - int
  bgp_default_ipv4_unicast:
    description: 'Default activation of IPv4 unicast address-family on all IPv4 neighbors.

      It is best practice to disable activation.

      '
    type: bool
    default: false
  bgp_distance:
    type: dict
    $ref: eos_cli_config_gen#/keys/router_bgp/keys/distance
  bgp_ecmp:
    description: Maximum ECMP for BGP multi-path
    type: int
    convert_types:
    - str
    default: 4
  bgp_graceful_restart:
    description: 'Graceful BGP restart allows a BGP speaker with separate control
      plane and data plane processing to continue forwarding traffic during a BGP
      restart.

      Its neighbors (receiving speakers) may retain routing information from the restarting
      speaker while a BGP session with it is being re-established, reducing route
      flapping.

      '
    type: dict
    keys:
      enabled:
        type: bool
        default: true
        description: Enable or disable graceful restart helper mode for all BGP peers.
      restart_time:
        type: int
        convert_types:
        - str
        min: 1
        max: 3600
        default: 300
        description: Restart time in seconds.
  bgp_maximum_paths:
    description: Maximum Paths for BGP multi-path
    type: int
    convert_types:
    - str
    default: 4
    min: 1
    max: 512
  bgp_mesh_pes:
    type: bool
    default: false
    description: Whether to configure an iBGP full mesh between PEs, either because
      there is no RR used or other reasons.
  bgp_peer_groups:
    description: 'Leverage an Arista EOS switch to generate the encrypted password
      using the correct peer group name.

      Note that the name of the peer groups use ''-'' instead of ''_'' in EOS configuration.

      '
    type: dict
    keys:
      ipv4_underlay_peers:
        type: dict
        keys:
          name:
            type: str
            default: IPv4-UNDERLAY-PEERS
            description: Name of peer group.
          password:
            type: str
            description: Type 7 encrypted password.
          structured_config:
            type: dict
            description: Custom structured config added under router_bgp.peer_groups.<name>
              for eos_cli_config_gen
      mlag_ipv4_underlay_peer:
        type: dict
        keys:
          name:
            type: str
            default: MLAG-IPv4-UNDERLAY-PEER
            description: Name of peer group.
          password:
            type: str
            description: Type 7 encrypted password.
          structured_config:
            type: dict
            description: Custom structured config added under router_bgp.peer_groups.<name>
              for eos_cli_config_gen
      evpn_overlay_peers:
        type: dict
        keys:
          name:
            type: str
            default: EVPN-OVERLAY-PEERS
            description: Name of peer group.
          password:
            type: str
            description: Type 7 encrypted password.
          structured_config:
            type: dict
            description: Custom structured config added under router_bgp.peer_groups.<name>
              for eos_cli_config_gen
      evpn_overlay_core:
        type: dict
        keys:
          name:
            type: str
            default: EVPN-OVERLAY-CORE
            description: Name of peer group.
          password:
            type: str
            description: Type 7 encrypted password.
          structured_config:
            type: dict
            description: Custom structured config added under router_bgp.peer_groups.<name>
              for eos_cli_config_gen
      mpls_overlay_peers:
        type: dict
        keys:
          name:
            type: str
            default: MPLS-OVERLAY-PEERS
            description: Name of peer group.
          password:
            type: str
            description: Type 7 encrypted password.
          structured_config:
            type: dict
            description: Custom structured config added under router_bgp.peer_groups.<name>
              for eos_cli_config_gen
      rr_overlay_peers:
        type: dict
        keys:
          name:
            type: str
            default: RR-OVERLAY-PEERS
            description: Name of peer group.
          password:
            type: str
            description: Type 7 encrypted password.
          structured_config:
            type: dict
            description: Custom structured config added under router_bgp.peer_groups.<name>
              for eos_cli_config_gen
      ipvpn_gateway_peers:
        type: dict
        keys:
          name:
            type: str
            default: IPVPN-GATEWAY-PEERS
            description: Name of peer group.
          password:
            type: str
            description: Type 7 encrypted password.
          structured_config:
            type: dict
            description: Custom structured config added under router_bgp.peer_groups.<name>
              for eos_cli_config_gen
      IPv4_UNDERLAY_PEERS:
        type: dict
        deprecation:
          warning: true
          new_key: bgp_peer_groups.ipv4_underlay_peers
          removed: true
          remove_in_version: 4.0.0
      MLAG_IPv4_UNDERLAY_PEER:
        type: dict
        deprecation:
          warning: true
          new_key: bgp_peer_groups.mlag_ipv4_underlay_peer
          removed: true
          remove_in_version: 4.0.0
      EVPN_OVERLAY_PEERS:
        type: dict
        deprecation:
          warning: true
          new_key: bgp_peer_groups.evpn_overlay_peers
          removed: true
          remove_in_version: 4.0.0
  bgp_update_wait_install:
    type: bool
    $ref: eos_cli_config_gen#/keys/router_bgp/keys/updates/keys/wait_install
  bgp_update_wait_for_convergence:
    type: bool
    $ref: eos_cli_config_gen#/keys/router_bgp/keys/updates/keys/wait_for_convergence
  connected_endpoints_keys:
    type: list
    primary_key: key
    convert_types:
    - dict
    description: 'Define connected endpoints keys to define the grouping of endpoints
      connecting to the fabric.

      This lets you specify various keys to better organize/group your data.

      The connected endpoints keys should be defined in the top level group_var for
      the fabric.

      '
    items:
      type: dict
      keys:
        key:
          type: str
        type:
          type: str
          description: Type used for documentation.
        description:
          type: str
          description: Description used for documentation.
  core_interfaces:
    type: dict
    $ref: '#/$defs/l3_edge'
    description: 'The `core_interfaces` data model can be used to configure L3 P2P
      links anywhere in the fabric.

      It can be between two switches that are already part of the fabric inventory,
      or it can be towards another device,

      where only one end of the link is on a switch in the fabric.'
  custom_structured_configuration_list_merge:
    type: str
    description: "The List-merge strategy used when merging custom structured configurations.\n\nThis
      applies to all vars prefixed by prefixes in `custom_structured_configuration_prefix`\nand
      all data under the various `structured_config` options.\n\nThe available list
      merge strategies:\n- `replace`:\n  - Any list will be replaced with the list
      defined in custom structured configurations.\n- `append`:\n  - Existing list
      items with the same \"Primary key\"-value will be updated.\n  - New items will
      be appended to the existing list (including duplicates).\n- `keep`:\n  - Only
      set list if there is no existing list or existing list is `None`.\n- `prepend`:\n
      \ - Existing list items with the same \"Primary key\"-value will be updated.\n
      \ - New items will be prepended to the existing list (including duplicates).\n-
      `append_rp`:\n  - Existing list items with the same \"Primary key\"-value will
      be updated.\n  - New unique items will be appended to the existing list.\n-
      `prepend_rp`:\n  - Existing list items with the same \"Primary key\"-value will
      be updated.\n  - New unique items will be prepended to the existing list.\n"
    valid_values:
    - replace
    - append
    - keep
    - prepend
    - append_rp
    - prepend_rp
    default: append_rp
  custom_structured_configuration_prefix:
    type: list
    convert_types:
    - str
    items:
      type: str
    description: "Custom EOS Structured Configuration keys can be set on any group
      or host_var level using the name\nof the corresponding `eos_cli_config_gen`
      key prefixed with content of `custom_structured_configuration_prefix`.\n\nThe
      content of Custom Structured Configuration variables will be merged with the
      structured config generated by the eos_designs role.\n\nThe merge is done recursively,
      so it is possible to update a sub-key of a variable set by `eos_designs` role
      already.\n\nThe merge follow these recursive merge strategies:\n- New keys will
      be added for all types.\n- Existing keys of type \"List\" with a \"Primary key\"
      set in the schema:\n  - Strategy can be changed with `custom_structured_configuration_list_merge`.
      Default strategy:\n    - Existing list items with the same \"Primary key\"-value
      will be updated.\n    - New unique items will be appended to the existing list\n-
      Other keys of type \"List\" will have new unique items appended the the existing
      list.\n- Existing keys of type \"Dictionary\" will recursively merge\n- Other
      existing keys will be replaced.\n"
    default:
    - custom_structured_configuration_
  cvp_ingestauth_key:
    type: str
    description: 'On-premise CVP ingest auth key. If set, TerminAttr will be configured
      with key-based authentication for on-premise CVP.

      If not set, TerminAttr will be configured with certificate based authentication:

      - On-premise using token onboarding. Default token path is ''/tmp/token''.

      - CVaaS using token-secure onboarding. Default token path is ''/tmp/cv-onboarding-token''.

      Token must be copied to the device first.'
  cvp_instance_ip:
    type: str
    description: 'IPv4 address or DNS name for CloudVision.

      This variable only supports an on-premise single-node cluster or the DNS name
      of a CloudVision as a Service instance.'
  cvp_instance_ips:
    type: list
    description: 'List of IPv4 addresses or DNS names for CloudVision.

      For on-premise CloudVision enter all the nodes of the cluster.

      For CloudVision as a Service enter the DNS name of the instance.

      `eos_designs` only supports one CloudVision cluster.

      '
    items:
      type: str
      description: IPv4 address or DNS name for CloudVision
  cvp_token_file:
    type: str
    description: 'cvp_token_file is the path to the token file on the switch.

      If not set the default locations for on-premise or CVaaS will be used.

      See cvp_ingestauth_key for details.'
  dc_name:
    description: 'DC Name, required to match Ansible Group name covering all devices
      in the DC.

      Required for 5-stage CLOS (Super-spines).

      '
    type: str
  default_igmp_snooping_enabled:
    description: 'When set to false, disables IGMP snooping at fabric level and overrides
      per vlan settings.

      '
    type: bool
    default: true
  default_interfaces:
    type: list
    description: "- Set default uplink, downlink, and MLAG interfaces, which will
      be used if these interfaces are not defined on a device (either directly or
      through inheritance).\n- These are defined based on the combination of node_type
      (e.g., l3leaf or spine) and a regex for matching the platform.\n- A list of
      interfaces or interface ranges can be specified.\n- Each list item supports
      range syntax that can be expanded into a list of interfaces. Interface range
      examples:\n  - Ethernet49-52/1: Expands to [ Ethernet49/1, Ethernet50/1, Ethernet51/1,
      Ethernet52/1 ]\n  - Ethernet1/31-34/1: Expands to [ Ethernet1/31/1, Ethernet1/32/1,
      Ethernet1/33/1, Ethernet1/34/1 ]\n  - Ethernet49-50,53-54: Expands to [ Ethernet49,
      Ethernet50, Ethernet53, Ethernet54 ]\n  - Ethernet1-2/1-4: Expands to [ Ethernet1/1,
      Ethernet1/2, Ethernet1/3, Ethernet1/4, Ethernet2/1, Ethernet2/2, Ethernet2/3,
      Ethernet2/4 ]\n- `uplink_interfaces` and `mlag_interfaces` under `default_interfaces`
      are directly inherited by `uplink_interfaces` and `mlag_interfaces`.\n- `downlink_interfaces`
      are referenced by the child switch (e.g., the leaf in a leaf/spine network).
      The child switch leverages an upstream switch's `default_downlink_interfaces`
      using the child switch ID.  This is then used to build `uplink_switch_interfaces`
      for that child.\n  - In the case of `max_parallel_uplinks` > 1 the `default_downlink_interfaces`
      are mapped with consecutive downlinks per child ID.\n  - Example for `max_parallel_uplinks:
      2`, downlink interfaces will be mapped as `[ <downlink1 to leaf-id1>, <downlink2
      to leaf-id1>, <downlink1 to leaf-id2>, <downlink2 to leaf-id2> ...]`\n- Please
      note that no default interfaces are defined in AVD itself. You will need to
      create your own based on the example below.\n\nExample:\n\n```yaml\ndefault_interfaces:\n
      \ - types: [ spine, l3leaf ]\n    platforms: [ \"7050[SC]X3\", vEOS.*, default
      ]\n    uplink_interfaces: [ Ethernet49-54/1 ]\n    mlag_interfaces: [ Ethernet55-56/1
      ]\n    downlink_interfaces: [ Ethernet1-32/1 ]\n```\n"
    items:
      type: dict
      keys:
        types:
          type: list
          required: true
          description: List of node type keys.
          items:
            type: str
        platforms:
          type: list
          required: true
          description: 'List of platform families.

            This is defined as a Python regular expression that matches the full platform
            type.

            '
          items:
            type: str
            description: Arista platform family regular expression.
        uplink_interfaces:
          type: list
          description: List of uplink interfaces or uplink interface ranges.
          items:
            type: str
            description: Interface range or interface.
        mlag_interfaces:
          type: list
          description: List of MLAG interfaces or MLAG interface ranges.
          items:
            type: str
            description: Interface range or interface.
        downlink_interfaces:
          type: list
          description: List of downlink interfaces or downlink interface ranges.
          items:
            type: str
            description: Interface range or interface.
  default_node_types:
    type: list
    primary_key: node_type
    description: Uses hostname matches against a regular expression to determine the
      node type.
    items:
      type: dict
      keys:
        node_type:
          type: str
          required: true
          description: Resulting node type when regex matches.
        match_hostnames:
          type: list
          required: true
          description: Regular expressions to match against hostnames.
          items:
            type: str
            required: true
            description: Regex needs to match full hostname (i.e. is bounded by ^
              and $ elements).
  design:
    type: dict
    keys:
      type:
        type: str
        description: 'By setting the design.type variable, the default node-types
          and templates described in these documents will be used.

          '
        valid_values:
        - l3ls-evpn
        - mpls
        - l2ls
        default: l3ls-evpn
  enable_trunk_groups:
    type: bool
    description: 'Enable Trunk Group support across eos_designs

      Warning: Because of the nature of the EOS Trunk Group feature, enabling this
      is "all or nothing".

      *All* vlans and *all* trunks towards connected endpoints must be using trunk
      groups as well.

      If trunk groups are not assigned to a trunk, no vlans will be enabled on that
      trunk.

      See "Details on enable_trunk_groups" below before enabling this feature.

      '
    default: false
  eos_designs_custom_templates:
    type: list
    items:
      type: dict
      keys:
        template:
          type: str
          description: Template file.
          required: true
        options:
          description: Template options
          type: dict
          keys:
            list_merge:
              type: str
              description: Merge strategy for lists
              default: append_rp
            strip_empty_keys:
              type: bool
              description: Filter out keys from the generated output if value is null/none/undefined
              default: true
  eos_designs_documentation:
    description: 'Control fabric documentation generation.

      '
    type: dict
    keys:
      connected_endpoints:
        description: 'Generate fabric-wide documentation for connected endpoints.

          '
        type: bool
        default: false
  event_handlers:
    $ref: eos_cli_config_gen#/keys/event_handlers
    type: list
  evpn_ebgp_gateway_inter_domain:
    type: bool
  evpn_ebgp_gateway_multihop:
    description: 'Default of 15, considering a large value to avoid BGP reachability
      issues in very complex DCI networks.

      Adapt the value for your specific topology.

      '
    type: int
    convert_types:
    - str
    default: 15
  evpn_ebgp_multihop:
    description: 'Default of 3, the recommended value for a 3 stage spine and leaf
      topology.

      Set to a higher value to allow for very large and complex topologies.

      '
    type: int
    convert_types:
    - str
    default: 3
  evpn_hostflap_detection:
    type: dict
    keys:
      enabled:
        description: If set to false it will disable EVPN host-flap detection
        type: bool
        default: true
      threshold:
        description: Minimum number of MAC moves that indicate a MAC duplication issue
        type: int
        convert_types:
        - str
        default: 5
      window:
        description: Time (in seconds) to detect a MAC duplication issue
        type: int
        convert_types:
        - str
        default: 180
      expiry_timeout:
        description: Time (in seconds) to purge a MAC duplication issue
        type: int
        convert_types:
        - str
  evpn_import_pruning:
    description: 'Enable VPN import pruning (Min. EOS 4.24.2F)

      The Route Target extended communities carried by incoming VPN paths will

      be examined. If none of those Route Targets have been configured for import,

      the path will be immediately discarded

      '
    type: bool
    default: false
  evpn_multicast:
    type: bool
    description: "General Configuration required for EVPN Multicast. \"evpn_l2_multicast\"
      must also be configured under the Network Services (tenants).\nRequires \"underlay_multicast:
      true\" and IGMP snooping enabled globally (default).\nFor MLAG devices Route
      Distinguisher must be unique since this feature will create multi-vtep configuration.\nWarning
      !!! For Trident3 based platforms i.e 7050X3, 7300X3, 720XP and 722XP\n  The
      Following default platform setting will be configured: \"platform trident forwarding-table
      partition flexible exact-match 16384 l2-shared 98304 l3-shared 131072\"\n  All
      forwarding agents will be restarted when this configuration is applied.\n  You
      can tune the settings by overridding the default variable: \"platform_settings[platforms].trident_forwarding_table_partition:\"\n
      \ Please contact an Arista representative for help with determining the appropriate
      values for your environment.\n"
    default: false
  evpn_overlay_bgp_rtc:
    description: 'Enable Route Target Membership Constraint Address Family on EVPN
      overlay BGP peerings (Min. EOS 4.25.1F)

      Requires use eBGP as overlay protocol.

      '
    type: bool
    default: false
  evpn_prevent_readvertise_to_server:
    description: 'Configure route-map on eBGP sessions towards route-servers, where
      prefixes with the peer''s ASN in the AS Path are filtered away.

      This is very useful in large-scale networks, where convergence will be quicker
      by not returning all updates received

      from Route-server-1 to Router-server-2 just for Route-server-2 to throw them
      away because of AS Path loop detection.

      '
    type: bool
    default: false
  evpn_rd_type:
    type: dict
    deprecation:
      warning: true
      new_key: overlay_rd_type
      removed: true
      remove_in_version: 4.0.0
  evpn_rt_type:
    type: dict
    deprecation:
      warning: true
      new_key: overlay_rt_type
      removed: true
      remove_in_version: 4.0.0
  evpn_short_esi_prefix:
    description: Configure prefix for "short_esi" values
    type: str
    default: '0000:0000:'
  evpn_vlan_aware_bundles:
    description: 'Enable vlan aware bundles for EVPN MAC-VRF

      '
    type: bool
    default: false
  fabric_evpn_encapsulation:
    description: Should be set to mpls for evpn-mpls scenario.
    valid_values:
    - vxlan
    - mpls
    default: vxlan
    type: str
  fabric_name:
    description: Fabric Name, required to match Ansible Group name covering all devices
      in the Fabric, **must** be an inventory group name.
    type: str
    required: true
  hardware_counters:
    $ref: eos_cli_config_gen#/keys/hardware_counters
    type: dict
  internal_vlan_order:
    type: dict
    description: Internal vlan allocation order and range.
    keys:
      allocation:
        type: str
        valid_values:
        - ascending
        - descending
        default: ascending
        required: true
      range:
        type: dict
        keys:
          beginning:
            type: int
            convert_types:
            - str
            description: First VLAN ID.
            default: 1006
            min: 2
            max: 4094
            required: true
          ending:
            type: int
            convert_types:
            - str
            description: Last VLAN ID.
            default: 1199
            min: 2
            max: 4094
            required: true
  ipv6_mgmt_destination_networks:
    description: 'List of IPv6 prefixes to configure as static routes towards the
      OOB IPv6 Management interface gateway.

      Replaces the default route.

      '
    type: list
    items:
      type: str
      description: IPv6_network/Mask
  ipv6_mgmt_gateway:
    type: str
    format: ipv6
    description: 'OOB Management interface gateway in IPv6 format.

      Used as next-hop for default gateway or static routes defined under ''ipv6_mgmt_destination_networks'''
  is_deployed:
    description: 'Is device already deployed in the fabric

      When set to false, interfaces toward this device may be shutdown depending on
      the `shutdown_interfaces_towards_undeployed_peers` setting.

      Furthermore `eos_config_deploy_cvp` will not attempt to move or apply configurations
      to the device.

      '
    type: bool
    default: true
  isis_advertise_passive_only:
    type: bool
    default: false
  isis_area_id:
    type: str
    default: '49.0001'
    convert_types:
    - int
    - float
  isis_default_circuit_type:
    type: str
    valid_values:
    - level-1-2
    - level-1
    - level-2
    default: level-2
    description: These fabric level parameters can be used with core_interfaces running
      ISIS, and may be overridden on link profile or link level.
  isis_default_is_type:
    type: str
    valid_values:
    - level-1-2
    - level-1
    - level-2
    default: level-2
  isis_default_metric:
    type: int
    convert_types:
    - str
    default: 50
    description: These fabric level parameters can be used with core_interfaces running
      ISIS, and may be overridden at link profile or link level.
  isis_maximum_paths:
    description: Number of path to configure in ECMP for ISIS.
    type: int
    convert_types:
    - str
  isis_ti_lfa:
    type: dict
    keys:
      enabled:
        type: bool
        default: false
      protection:
        type: str
        valid_values:
        - link
        - node
      local_convergence_delay:
        description: Local convergence delay in milliseconds
        type: int
        convert_types:
        - str
        default: 10000
  l3_edge:
    type: dict
    $ref: '#/$defs/l3_edge'
    description: 'The `l3_edge` data model can be used to configure extra L3 P2P links
      anywhere in the fabric.

      It can be between two switches that are already part of the fabric inventory,
      or it can be towards another device, where only one end of the link is on a
      switch in the fabric.

      Fabric switches can be types `l3leaf`, `spine` or `super-spine`.


      The data model supports using IP pools, Subnet per link or specifying the IP
      addresses manually.

      For BGP peerings the AS number must be specified.

      If the AS number is different than the AS number configured for the node, the
      local-as will be replaced on this BGP peering (`neighbor <ip> local-as <as>
      no-prepend replace-as`).


      Make sure to configure the variables in a group_vars file covering all devices
      mentioned in the data model.'
  local_users:
    $ref: eos_cli_config_gen#/keys/local_users
    type: list
  mac_address_table:
    type: dict
    description: 'MAC address-table aging time

      Use to change the EOS default of 300.

      '
    keys:
      aging_time:
        type: int
        convert_types:
        - str
        description: 'Aging time in seconds 10-1000000.

          Enter 0 to disable aging.

          '
        min: 0
        max: 1000000
  management_eapi:
    description: 'Default is HTTPS management eAPI enabled.

      The VRF is set to < mgmt_interface_vrf >.

      '
    type: dict
    keys:
      enable_http:
        type: bool
        default: false
      enable_https:
        type: bool
        default: true
      default_services:
        type: bool
  mgmt_destination_networks:
    type: list
    description: 'List of IPv4 prefixes to configure as static routes towards the
      OOB Management interface gateway.

      Replaces the default route.'
    items:
      type: str
      description: IPv4_address/Mask
  mgmt_gateway:
    type: str
    description: 'OOB Management interface gateway in IPv4 format.

      Used as next-hop for default gateway or static routes defined under ''mgmt_destination_networks'''
  mgmt_interface:
    type: str
    default: Management1
    description: OOB Management interface.
  mgmt_interface_description:
    type: str
    description: 'Management interface description

      '
    default: oob_management
  mgmt_interface_vrf:
    type: str
    default: MGMT
    description: OOB Management VRF.
  mgmt_vrf_routing:
    type: bool
    default: false
    description: Configure IP routing for the OOB Management VRF.
  mlag_ibgp_peering_vrfs:
    type: dict
    description: 'On mlag leafs, an SVI interface is defined per vrf, to establish
      iBGP peering (required when there are MLAG leafs in topology)

      The SVI id will be derived from the base vlan defined: mlag_ibgp_peering_vrfs.base_vlan
      + (vrf_id or vrf_vni) - 1

      Depending on the values of vrf_id / vrf_vni it may be required to adjust the
      base_vlan to avoid overlaps or invalid vlan ids.

      The SVI ip address derived from mlag_l3_peer_ipv4_pool is re-used across all
      iBGP peerings.

      '
    keys:
      base_vlan:
        type: int
        convert_types:
        - str
        min: 1
        max: 4093
        default: 3000
  name_servers:
    type: list
    description: List of DNS servers. The VRF is set to < mgmt_interface_vrf >.
    items:
      type: str
      description: IPv4 address
  network_ports:
    type: list
    description: 'All switch_ports ranges are expanded into individual port configurations.

      '
    items:
      type: dict
      $ref: '#/$defs/adapter_config'
      keys:
        switches:
          type: list
          description: 'Regex matching the full hostname of one or more switches.

            The regular expression must match the full hostname.

            '
          items:
            type: str
        switch_ports:
          type: list
          description: "List of ranges using AVD range_expand syntax.\nFor example:\n\nswitch_ports:\n
            \ - Ethernet1\n  - Ethernet2-48\n"
          items:
            type: str
        description:
          type: str
          description: Description to be used on all ports.
  network_services_keys:
    type: list
    primary_key: name
    convert_types:
    - dict
    description: 'Define network services keys, to define grouping of network services.

      This provides the ability to define various keys of your choice to better organize/group
      your data.

      This should be defined in top level group_var for the fabric.

      '
    items:
      type: dict
      keys:
        name:
          type: str
  node_type_keys:
    type: list
    description: 'Define Node Type Keys, to specify the properties of each node type
      in the fabric.

      This allows for complete customization of the fabric layout.

      This should be defined in top level group_var for the fabric.

      '
    convert_types:
    - dict
    primary_key: key
    items:
      type: dict
      keys:
        key:
          type: str
        type:
          type: str
          description: Type value matching this node_type_key.
        connected_endpoints:
          type: bool
          default: false
          description: Are endpoints connected to this node type.
        default_evpn_role:
          type: str
          valid_values:
          - none
          - client
          - server
          default: none
          description: Default evpn_role. Can be overridden in topology vars.
        default_ptp_priority1:
          type: int
          min: 0
          max: 255
          default: 127
          description: Default PTP priority 1
        default_underlay_routing_protocol:
          type: str
          default: ebgp
          convert_to_lower_case: true
          valid_values:
          - ebgp
          - ibgp
          - ospf
          - ospf-ldp
          - isis
          - isis-sr
          - isis-ldp
          - isis-sr-ldp
          - none
          description: 'Set the default underlay routing_protocol.

            Can be overridden by setting "underlay_routing_protocol" host/group_vars.

            '
        default_overlay_routing_protocol:
          type: str
          default: ebgp
          convert_to_lower_case: true
          valid_values:
          - ebgp
          - ibgp
          - her
          - cvx
          - none
          description: 'Set the default overlay routing_protocol.

            Can be overridden by setting "overlay_routing_protocol" host/group_vars.

            '
        default_mpls_overlay_role:
          type: str
          valid_values:
          - client
          - server
          - none
          description: 'Set the default mpls overlay role.

            Acting role in overlay control plane.

            '
        default_overlay_address_families:
          type: list
          convert_types:
          - str
          items:
            type: str
            convert_to_lower_case: true
            valid_values:
            - evpn
            - vpn-ipv4
            - vpn-ipv6
          description: 'Set the default overlay address families.

            '
        default_evpn_encapsulation:
          type: str
          convert_to_lower_case: true
          valid_values:
          - mpls
          - vxlan
          description: 'Set the default evpn encapsulation.

            '
        mlag_support:
          type: bool
          default: false
          description: Can this node type support mlag.
        network_services:
          description: Will network services be deployed on this node type.
          type: dict
          keys:
            l1:
              type: bool
              default: false
              description: ??
            l2:
              type: bool
              default: false
              description: Vlans
            l3:
              type: bool
              default: false
              description: 'VRFs, SVIs (if l2 is true).

                Only supported with underlay_router.

                '
        underlay_router:
          type: bool
          default: true
          description: Is this node type a L3 device.
        uplink_type:
          type: str
          valid_values:
          - p2p
          - port-channel
          default: p2p
          description: Uplinks must be p2p if "vtep" or "underlay_router" is true.
        vtep:
          type: bool
          default: false
          description: Is this switch an EVPN VTEP.
        mpls_lsr:
          type: bool
          default: false
          description: Is this switch an MPLS LSR.
        ip_addressing:
          type: dict
          description: Override ip_addressing templates.
          keys:
            python_module:
              type: str
              description: Python Module to import for IP addressing - default inherited
                from templates.ip_addressing.python_module
            python_class_name:
              type: str
              description: Name of Python Class to import for IP addressing  - default
                inherited from templates.ip_addressing.python_class_name
            router_id:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.router_id.
            router_id_ipv6:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.router_id_ipv6.
            mlag_ip_primary:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.mlag_ip_primary.
            mlag_ip_secondary:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.mlag_ip_secondary.
            mlag_l3_ip_primary:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.mlag_l3_ip_primary.
            mlag_l3_ip_secondary:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.mlag_l3_ip_secondary.
            mlag_ibgp_peering_ip_primary:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.mlag_ibgp_peering_ip_primary.
            mlag_ibgp_peering_ip_secondary:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.mlag_ibgp_peering_ip_secondary.
            p2p_uplinks_ip:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.p2p_uplinks_ip.
            p2p_uplinks_peer_ip:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.p2p_uplinks_peer_ip.
            vtep_ip_mlag:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.vtep_ip_mlag.
            vtep_ip:
              type: str
              description: Path to J2 template - default inherited from templates.ip_addressing.vtep_ip.
        interface_descriptions:
          type: dict
          description: 'Override interface_descriptions templates

            If description templates use Jinja2, they have to strip whitespaces using
            {%- -%} on any code blocks.

            '
          keys:
            python_module:
              type: str
              description: Python Module to import for interface descriptions - default
                inherited from templates.interface_descriptions.python_module
            python_class_name:
              type: str
              description: Name of Python Class to import for interface descriptions
                - default inherited from templates.interface_descriptions.python_class_name
            underlay_ethernet_interfaces:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.underlay_ethernet_interfaces.
            underlay_port_channel_interfaces:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.underlay_port_channel_interfaces.
            mlag_ethernet_interfaces:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.mlag_ethernet_interfaces.
            mlag_port_channel_interfaces:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.mlag_port_channel_interfaces.
            connected_endpoints_ethernet_interfaces:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.connected_endpoints_ethernet_interfaces.
            connected_endpoints_port_channel_interfaces:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.connected_endpoints_port_channel_interfaces.
            overlay_loopback_interface:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.overlay_loopback_interface.
            vtep_loopback_interface:
              type: str
              description: Path to J2 template - default inherited from templates.interface_descriptions.vtep_loopback_interface.
  only_local_vlan_trunk_groups:
    type: bool
    description: 'A vlan can have many trunk_groups assigned. To avoid unneeded configuration
      changes on all leaf

      switches when a new trunk group is added, this feature will only configure the
      vlan trunk groups

      matched with local connected_endpoints.

      See "Details on only_local_vlan_trunk_groups" below.

      Requires "enable_trunk_groups: true"

      '
    default: false
  overlay_cvx_servers:
    description: 'List of CVX vxlan overlay controllers.

      Required if overlay_routing_protocol == CVX.

      CVX servers (VMs) are peering using their management interface, so mgmt_ip must
      be set for all CVX servers.

      '
    type: list
    items:
      type: str
      description: '''inventory_hostname'' of CVX server'
  overlay_her_flood_list_per_vni:
    type: bool
    description: 'When using Head-End Replication, configure flood-lists per VNI.

      By default HER will be configured with a common flood-list containing all VTEPs.

      This behavior can be changed to per-VNI flood-lists by setting `overlay_her_flood_list_per_vni:
      true`.

      This will make `eos_designs` consider configured VLANs per VTEP, and only include
      the relevant VTEPs to each VNI''s flood-list.

      '
    default: false
  overlay_her_flood_list_scope:
    type: str
    description: 'When using Head-End Replication, set the scope of flood-lists to
      Fabric or DC.

      By default all VTEPs in the Fabric (part of the inventory group referenced by
      "fabric_name") are added to the flood-lists.

      This can be changed to all VTEPs in the DC (part of the inventory group referenced
      by "dc_name").

      This is useful if Border Leaf switches are dividing the VXLAN overlay into separate
      domains.

      '
    valid_values:
    - fabric
    - dc
    default: fabric
  overlay_loopback_description:
    description: Customize the description on overlay interface Loopback0.
    type: str
  overlay_mlag_rfc5549:
    description: 'IPv6 Unnumbered for MLAG iBGP connections.

      Requires "underlay_rfc5549: true".

      '
    type: bool
    default: false
  overlay_rd_type:
    type: dict
    description: 'Specify RD type.

      Route Distinguisher (RD) for L2 / L3 services is set to <overlay_loopback>:<vni>
      per default.

      By configuring overlay_rd_type the Administrator subfield (first part of RD)
      can be set to other values.

      Note:

      RD is a 48-bit value which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.

      For loopback or 32-bit ASN/number the VNI can only be a 16-bit number.

      For 16-bit ASN/number the VNI can be a 32-bit number.

      '
    keys:
      admin_subfield:
        type: str
        convert_types:
        - int
        description: '"vtep_loopback" or "bgp_as" or <IPv4 Address> or interger between
          <0-65535> or integer between <0-4294967295> or "overlay_loopback_ip".

          '
        default: overlay_loopback_ip
      admin_subfield_offset:
        type: str
        convert_types:
        - int
        description: 'Offset can only be used if admin_subfield is an interger between
          <0-4294967295> or "switch_id".

          Total value of admin_subfield + admin_subfield_offset must be <= 4294967295.'
  overlay_routing_protocol:
    description: "- The following overlay routing protocols are supported:\n  - eBGP:
      Configures fabric with eBGP, default for l3ls-evpn design.\n  - iBGP: Configured
      fabric with iBGP, only supported with OSPF or ISIS variants in underlay, default
      for mpls design.\n  - CVX: Configures fabric to leverage CloudVision eXchange
      as the overlay controller.\n  - HER: Configures fabric with Head-End Replication,
      configures static VXLAN flood-lists instead of using a dynamic overlay protocol.\n
      \ - none: No overlay configuration will be generated, default for l2ls design.\n"
    type: str
    valid_values:
    - ebgp
    - ibgp
    - cvx
    - her
    - none
    default: ebgp
    convert_to_lower_case: true
  overlay_routing_protocol_address_family:
    type: str
    description: 'When set to `ipv6`, enable overlay EVPN peering with IPv6 addresses.

      This feature depends on underlay_ipv6 variable. As of today, only RFC5549 is
      capable to transport IPv6 in the underlay.

      '
    valid_values:
    - ipv4
    - ipv6
    default: ipv4
  overlay_rt_type:
    type: dict
    description: 'Specify RT type.

      Route Target (RT) for L2 / L3 services is set to <vni>:<vni> per default.

      By configuring overlay_rt_type the Administrator subfield (first part of RT)
      can be set to other values.

      Notes:

      RT is a 48-bit value which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.

      For 32-bit ASN/number the VNI can only be a 16-bit number.

      For 16-bit ASN/number the VNI can be a 32-bit number.

      '
    keys:
      admin_subfield:
        type: str
        convert_types:
        - int
        description: '"bgp_as" or interger between <0-65535> or integer between <0-4294967295>.

          '
        default: mac_vrf_id
  p2p_uplinks_mtu:
    description: Point to Point Links MTU
    type: int
    convert_types:
    - str
    min: 68
    max: 65535
    default: 9214
  p2p_uplinks_qos_profile:
    description: QOS Profile assigned on all infrastructure links
    type: str
  platform_settings:
    type: list
    items:
      type: dict
      keys:
        platforms:
          type: list
          items:
            type: str
        trident_forwarding_table_partition:
          type: str
          description: Only applied when evpn_multicast is true
        reload_delay:
          type: dict
          keys:
            mlag:
              type: int
              convert_types:
              - str
              min: 0
              max: 86400
              description: In seconds
            non_mlag:
              type: int
              convert_types:
              - str
              min: 0
              max: 86400
              description: In seconds
        tcam_profile:
          type: str
        lag_hardware_only:
          type: bool
        feature_support:
          type: dict
          keys:
            queue_monitor_length_notify:
              type: bool
              default: true
            interface_storm_control:
              type: bool
              default: true
            bgp_update_wait_install:
              type: bool
              default: true
              description: 'Disables FIB updates and route advertisement when the
                BGP instance is initiated until the BGP convergence state is reached.

                Can be overridden by setting "bgp_update_wait_install" host/group_vars

                '
            bgp_update_wait_for_convergence:
              type: bool
              default: true
              description: 'Do not advertise reachability to a prefix until that prefix
                has been installed in hardware.

                This will eliminate any temporary black holes due to a BGP speaker
                advertising reachability to a prefix that may not yet be installed
                into the forwarding plane.

                Can be overridden by setting "bgp_update_wait_for_convergence" host/group_vars

                '
        management_interface:
          type: str
          default: Management1
        raw_eos_cli:
          type: str
          description: EOS CLI rendered directly on the root level of the final EOS
            configuration
  platform_speed_groups:
    type: list
    primary_key: platform
    secondary_key: speeds
    convert_types:
    - dict
    description: Set Hardware Speed Groups per Platform
    items:
      type: dict
      keys:
        platform:
          type: str
        speeds:
          type: list
          primary_key: speed
          secondary_key: speed_groups
          convert_types:
          - dict
          items:
            type: dict
            keys:
              speed:
                type: str
              speed_groups:
                type: list
                items:
                  type: int
                  convert_types:
                  - str
  pod_name:
    description: 'POD Name, only used in Fabric Documentation (Optional), fallback
      to dc_name and then to fabric_name.

      Recommended to be common between Spines and Leafs within a POD (One l3ls topology).

      '
    type: str
  port_profiles:
    type: list
    primary_key: profile
    convert_types:
    - dict
    description: 'Optional profiles to share common settings for connected_endpoints
      and/or network_ports.

      Keys are the same used under endpoints adapters. Keys defined under endpoints
      adapters take precedence.

      '
    items:
      type: dict
      $ref: '#/$defs/adapter_config'
      keys:
        profile:
          type: str
          description: Port profile name.
        parent_profile:
          type: str
          description: 'Parent profile is optional.

            Port_profiles can refer to another port_profile to inherit settings in
            up to two levels (adapter->profile->parent_profile).'
  ptp_profiles:
    type: list
    items:
      type: dict
      keys:
        profile:
          type: str
          description: PTP profile.
        announce:
          type: dict
          description: PTP announce interval.
          keys:
            interval:
              type: int
              convert_types:
              - str
              min: -7
              max: 4
            timeout:
              type: int
              convert_types:
              - str
              min: 2
              max: 255
        delay_req:
          type: int
          convert_types:
          - str
          min: -7
          max: 8
        sync_message:
          type: dict
          description: PTP sync message interval.
          keys:
            interval:
              type: int
              convert_types:
              - str
              min: -7
              max: 3
        transport:
          type: str
          valid_values:
          - ipv4
  redundancy:
    type: dict
    description: Redundancy for chassis platforms with dual supervisors | Optional
    keys:
      protocol:
        type: str
        valid_values:
        - sso
        - rpr
  serial_number:
    description: 'Serial Number of the device.

      Used for documentation purpose in the fabric documentation as can also be used
      by the ''eos_config_deploy_cvp'' role.

      "serial_number" can also be set directly under "Fabric Topology".

      If both are set, the setting under "Fabric Topology" takes precedence.

      '
    type: str
    convert_types:
    - int
  shutdown_interfaces_towards_undeployed_peers:
    type: bool
    default: false
    description: '- It is possible to provision configurations for a complete topology
      but flag devices as undeployed using the host level variable `is_deployed: false`.


      ```yaml

      # Use at the host level

      is_deployed: < true or false or default -> true >

      ```


      - By default, this will have no impact within the `eos_designs` role. Configs
      will still be generated by the `eos_cli_config_gen` role and will still be pushed
      by the `eos_config_deploy_eapi` directly to devices if used.

      - However, if the `eos_config_deploy_cvp` role is used to push configurations,
      CloudVision will ignore the devices flagged  as `is_deployed: false` and not
      attempt to configure them.

      - If the device is not present in the network due to CloudVision not configuring
      the device, `eos_validate_state` role will fail tests on peers of the undeployed
      device trying to verify that interfaces are up.

      - To overcome this and shutdown interfaces towards undeployed peers, the variable
      `shutdown_interfaces_towards_undeployed_peers` can be used, satisfying the `eos_validate_state`
      role interface tests.

      - Again, this is only an issue if `eos_config_deploy_cvp` is used and the devices
      are not present in the network.'
  snmp_settings:
    type: dict
    description: Set SNMP settings (optional).
    keys:
      contact:
        type: str
        description: SNMP contact.
      location:
        type: bool
        default: false
        description: Set SNMP location. Formatted as {{ fabric_name }} {{ dc_name
          }} {{ pod_name }} {{ switch_rack }} {{ inventory_hostname }}.
      compute_local_engineid:
        type: bool
        default: false
        description: 'Generate a local engineId for SNMP using the ''compute_local_engineid_source''
          method.

          '
      compute_local_engineid_source:
        type: str
        default: hostname_and_ip
        description: "`compute_local_engineid_source` supports:\n- `hostname_and_ip`
          generate a local engineId for SNMP by hashing via SHA1\n  the string generated
          via the concatenation of the hostname plus the management IP.\n  {{ inventory_hostname
          }} + {{ switch.mgmt_ip }}\n- `system_mac` generate the switch default engine
          id for AVD usage\n  To use this, `system_mac_address` MUST be set for the
          device\n  The formula is f5717f + system_mac_address + 00\n"
        valid_values:
        - hostname_and_ip
        - system_mac
      compute_v3_user_localized_key:
        type: bool
        default: false
        description: 'Requires compute_local_engineid to be `true`.

          If enabled, the SNMPv3 passphrases for auth and priv are transformed using
          RFC 2574, matching the value they would take in EOS CLI.

          The algorithm requires a local engineId, which is unknown to AVD, hence
          the necessity to generate one beforehand.

          '
      users:
        type: list
        items:
          type: dict
          keys:
            name:
              type: str
              description: Username
            group:
              type: str
              description: 'Configuration of the SNMP User Groups are currently only
                possible using `structured_config`.

                '
            version:
              type: str
              valid_values:
              - v1
              - v2c
              - v3
            auth:
              type: str
              valid_values:
              - md5
              - sha
              - sha256
              - sha384
              - sha512
            auth_passphrase:
              type: str
              description: Cleartext passphrase so the recommendation is to use vault.
                Requires 'auth' to be set.
            priv:
              type: str
              valid_values:
              - des
              - aes
              - aes192
              - aes256
            priv_passphrase:
              type: str
              description: Cleartext passphrase so the recommendation is to use vault.
                Requires 'priv' to be set.
  svi_profiles:
    type: list
    primary_key: profile
    convert_types:
    - dict
    description: 'Profiles to share common settings for SVIs under `<network_services_key>.[].vrfs.svis`.

      Keys are the same used under SVIs. Keys defined under SVIs take precedence.

      Note: structured configuration is not merged recursively and will be taken directly
      from the most specific level in the following order:

      1. svi.nodes[inventory_hostname].structured_config

      2. svi_profile.nodes[inventory_hostname].structured_config

      3. svi_parent_profile.nodes[inventory_hostname].structured_config

      4. svi.structured_config

      5. svi_profile.structured_config

      6. svi_parent_profile.structured_config

      '
    items:
      $ref: '#/$defs/svi'
      type: dict
      keys:
        profile:
          type: str
          description: Profile name
        parent_profile:
          type: str
          description: 'Parent SVI profile name to apply.

            svi_profiles can refer to another svi_profile to inherit settings in up
            to two levels (svi -> svi_profile -> svi_parent_profile).'
  system_mac_address:
    type: str
    description: 'Set to the same MAC address as available in "show version" on the
      device.

      "system_mac_address" can also be set under "Fabric Topology".

      If both are set, the setting under "Fabric Topology" takes precedence.'
  terminattr_disable_aaa:
    type: bool
    default: false
  terminattr_ingestexclude:
    type: str
    default: /Sysdb/cell/1/agent,/Sysdb/cell/2/agent
  terminattr_ingestgrpcurl_port:
    type: int
    convert_types:
    - str
    default: 9910
    description: 'Port number used for Terminattr connection to an on-premise CloudVision
      cluster.

      The port number is always 443 when using CloudVision as a Service, so this value
      is ignored.'
  terminattr_smashexcludes:
    type: str
    default: ale,flexCounter,hardware,kni,pulse,strata
  timezone:
    type: str
    description: Clock timezone like "CET" or "US/Pacific".
  trunk_groups:
    type: dict
    keys:
      mlag:
        type: dict
        description: 'Trunk Group used for MLAG VLAN (Typically VLAN 4094)

          '
        keys:
          name:
            type: str
            default: MLAG
      mlag_l3:
        type: dict
        description: 'Trunk Group used for MLAG L3 peering VLAN and for VRF L3 peering
          VLANs (Typically VLAN 4093)

          '
        keys:
          name:
            type: str
            default: LEAF_PEER_L3
      uplink:
        type: dict
        description: 'Trunk Group used on L2 Leaf switches when "enable_trunk_groups"
          is set

          '
        keys:
          name:
            type: str
            default: UPLINK
  type:
    type: str
    dynamic_valid_values: node_type_keys.type
    description: 'The `type:` variable needs to be defined for each device in the
      fabric.

      This is leveraged to load the appropriate template to generate the configuration.'
  underlay_filter_peer_as:
    type: bool
    description: 'Configure route-map on eBGP sessions towards underlay peers, where
      prefixes with the peer''s ASN in the AS Path are filtered away.

      This is very useful in very large scale networks not using EVPN overlays, where
      convergence will be quicker by not having to return

      all updates received from Spine-1 to Spine-2 just for Spine-2 to throw them
      away because of AS Path loop detection.

      Note this key is ignored when EVPN is configured.

      '
    default: false
  underlay_filter_redistribute_connected:
    description: 'Filter redistribution of connected into the underlay routing protocol.

      Only applicable when overlay_routing_protocol != ''none'' and underlay_routing_protocol
      == BGP.

      Creates a route-map and prefix-list assigned to redistribute connected permitting
      only loopbacks and inband management subnets.

      '
    default: true
    type: bool
  underlay_ipv6:
    description: 'This feature allows IPv6 underlay routing protocol with RFC5549
      addresses to be used along with IPv4 advertisements as VXLAN tunnel endpoints.

      Requires "underlay_rfc5549: true" and "loopback_ipv6_pool" under the "Fabric
      Topology"

      '
    type: bool
    default: false
  underlay_isis_instance_name:
    description: Default -> "EVPN_UNDERLAY" for l3ls, "CORE" for mpls
    type: str
  underlay_multicast:
    type: bool
    description: 'Enable Multicast in the underlay on all p2p uplink interfaces and
      mlag l3 peer interface.

      Specifically PIM Sparse-Mode will be configured on all routed underlay interfaces.

      No other configuration is added, so the underlay will only support Source-Specific
      Multicast (SSM)

      The configuration is intended to be used as multicast underlay for EVPN OISM
      overlay

      '
    default: false
  underlay_ospf_area:
    type: str
    convert_types:
    - int
    format: ipv4
    default: 0.0.0.0
  underlay_ospf_bfd_enable:
    type: bool
    default: false
  underlay_ospf_max_lsa:
    type: int
    convert_types:
    - str
    default: 12000
  underlay_ospf_process_id:
    type: int
    convert_types:
    - str
    default: 100
  underlay_rfc5549:
    description: 'Point to Point Underlay with RFC 5549(eBGP), i.e. IPv6 Unnumbered

      Requires "underlay_routing_protocol: ebgp"

      '
    type: bool
    default: false
  underlay_routing_protocol:
    type: str
    convert_to_lower_case: true
    description: "- The following underlay routing protocols are supported:\n  - EBGP
      (default for l3ls-evpn)\n  - OSPF.\n  - ISIS.\n  - ISIS-SR*.\n  - ISIS-LDP*.\n
      \ - ISIS-SR-LDP*.\n  - OSPF-LDP*.\n- The variables should be applied to all
      devices in the fabric.\n*Only supported with core_interfaces data model.\n"
    valid_values:
    - ebgp
    - ospf
    - isis
    - isis-sr
    - isis-ldp
    - isis-sr-ldp
    - ospf-ldp
  uplink_ptp:
    description: Enable PTP on all infrastructure links
    type: dict
    keys:
      enable:
        type: bool
        default: false
  vtep_vvtep_ip:
    description: 'IP Address used as Virtual VTEP. Will be configured as secondary
      IP on Loopback1.

      This is only needed for centralized routing designs.

      '
    type: str
  vxlan_vlan_aware_bundles:
    deprecation:
      warning: true
      new_key: evpn_vlan_aware_bundles
      removed: true
      remove_in_version: 4.0.0
    type: bool
    default: false
dynamic_keys:
  connected_endpoints_keys.key:
    $ref: '#/$defs/connected_endpoints'
  network_services_keys.name:
    $ref: '#/$defs/network_services'
  node_type_keys.key:
    $ref: '#/$defs/node_type'
$defs:
  adapter_config:
    type: dict
    keys:
      endpoint_ports:
        type: list
        description: 'Endpoint ports is used for description, required unless description
          is set.

          The lists `endpoint_ports`, `switch_ports`, and `switches` must have the
          same length.

          Each list item is one switchport.

          '
        items:
          type: str
          description: Interface name.
      speed:
        type: str
        description: 'Set adapter speed: `< interface_speed >`, `forced < interface_speed
          >`, `auto < interface_speed >`.

          If not specified will be auto.

          '
      description:
        type: str
        description: 'By default the description is built leveraging `<peer>_<peer_interface>`.

          When set this key will overide the default value on the physical ports.

          '
      profile:
        type: str
        description: Port-profile name to inherit configuration.
      enabled:
        type: bool
        description: 'Administrative state, setting to false will set the port to
          ''shutdown'' in the intended configuration.

          '
        default: true
      mode:
        type: str
        valid_values:
        - access
        - dot1q-tunnel
        - trunk
        - trunk phone
        description: Interface mode.
      mtu:
        type: int
        convert_types:
        - str
        min: 68
        max: 65535
      l2_mtu:
        type: int
        convert_types:
        - str
        min: 68
        max: 9416
        description: This should only be defined for platforms supporting the "l2
          mtu" CLI command.
      native_vlan:
        type: int
        convert_types:
        - str
        description: 'Native VLAN for a trunk port.

          If both `native_vlan` and `native_vlan_tag`, `native_vlan_tag` takes precedence.

          '
        min: 1
        max: 4094
      native_vlan_tag:
        type: bool
        default: false
        description: If both `native_vlan` and `native_vlan_tag`, `native_vlan_tag`
          takes precedence.
      trunk_groups:
        type: list
        items:
          type: str
        description: 'Required with `enable_trunk_groups: true`.

          Trunk Groups are used for limiting VLANs on trunk ports to VLANs with the
          same Trunk Group.

          '
      vlans:
        type: str
        description: Interface VLANs - if not set, the EOS default is that all VLANs
          are allowed for trunk ports, and VLAN 1 will be used for access ports.
        convert_types:
        - int
      spanning_tree_portfast:
        type: str
        valid_values:
        - edge
        - network
      spanning_tree_bpdufilter:
        type: str
        convert_types:
        - bool
        valid_values:
        - enabled
        - disabled
        - 'True'
        - 'False'
        - 'true'
        - 'false'
      spanning_tree_bpduguard:
        type: str
        convert_types:
        - bool
        valid_values:
        - enabled
        - disabled
        - 'True'
        - 'False'
        - 'true'
        - 'false'
      flowcontrol:
        type: dict
        keys:
          received:
            type: str
            valid_values:
            - received
            - send
            - 'on'
      qos_profile:
        type: str
        description: QOS profile name
      ptp:
        type: dict
        description: 'The global PTP profile parameters will be applied to all connected
          endpoints where `ptp` is manually enabled.

          `ptp role master` is set to ensure control over the PTP topology.

          '
        keys:
          enabled:
            type: bool
            default: false
          endpoint_role:
            type: str
            default: follower
            valid_values:
            - bmca
            - default
            - follower
          profile:
            type: str
            default: aes67-r16-2016
            valid_values:
            - aes67
            - aes67-r16-2016
            - smpte2059-2
      link_tracking:
        type: dict
        description: 'Configure the downstream interfaces of a respective Link Tracking
          Group.

          If `port_channel` is defined in an adapter, then the port-channel interface
          is configured to be the downstream.

          Else all the ethernet interfaces will be configured as downstream -> to
          configure single-active EVPN multihomed networks.

          '
        keys:
          enabled:
            type: bool
          name:
            type: str
            description: 'Tracking group name.

              The default group name is taken from fabric variable of the switch,
              `link_tracking.groups[0].name` with default value being "LT_GROUP1".

              Optional if default link_tracking settings are configured on the node.

              '
      dot1x:
        type: dict
        description: 802.1x
        keys:
          port_control:
            type: str
            valid_values:
            - auto
            - force-authorized
            - force-unauthorized
          port_control_force_authorized_phone:
            type: bool
          reauthentication:
            type: bool
          pae:
            type: dict
            keys:
              mode:
                type: str
                valid_values:
                - authenticator
          authentication_failure:
            type: dict
            keys:
              action:
                type: str
                valid_values:
                - allow
                - drop
              allow_vlan:
                type: int
                convert_types:
                - str
                min: 1
                max: 4094
          host_mode:
            type: dict
            keys:
              mode:
                type: str
                valid_values:
                - multi-host
                - single-host
              multi_host_authenticated:
                type: bool
          mac_based_authentication:
            type: dict
            keys:
              enabled:
                type: bool
              always:
                type: bool
              host_mode_common:
                type: bool
          timeout:
            type: dict
            keys:
              idle_host:
                type: int
                convert_types:
                - str
                min: 10
                max: 65535
              quiet_period:
                type: int
                convert_types:
                - str
                min: 1
                max: 65535
              reauth_period:
                type: str
                convert_types:
                - int
                description: Range 60-4294967295 or "server".
              reauth_timeout_ignore:
                type: bool
              tx_period:
                type: int
                convert_types:
                - str
                min: 1
                max: 65535
          reauthorization_request_limit:
            type: int
            convert_types:
            - str
            min: 1
            max: 10
      storm_control:
        type: dict
        description: Storm control settings applied on port toward the endpoint.
        keys:
          all:
            type: dict
            keys:
              level:
                type: int
                convert_types:
                - str
                description: Configure maximum storm-control level.
              unit:
                type: str
                valid_values:
                - percent
                - pps
                default: percent
                description: Optional variable and is hardware dependent.
          broadcast:
            $ref: '#/$defs/adapter_config/keys/storm_control/keys/all'
          multicast:
            $ref: '#/$defs/adapter_config/keys/storm_control/keys/all'
          unknown_unicast:
            $ref: '#/$defs/adapter_config/keys/storm_control/keys/all'
      monitor_sessions:
        type: list
        description: Used to define switchports as source or destination for monitoring
          sessions.
        items:
          type: dict
          keys:
            name:
              type: str
              required: true
              description: Session name.
            role:
              type: str
              valid_values:
              - source
              - destination
            source_settings:
              type: dict
              keys:
                direction:
                  type: str
                  valid_values:
                  - rx
                  - tx
                  - both
                access_group:
                  type: dict
                  keys:
                    type:
                      type: str
                      valid_values:
                      - ip
                      - ipv6
                      - mac
                    name:
                      description: ACL name.
                      type: str
                    priority:
                      type: int
                      convert_types:
                      - str
            session_settings:
              type: dict
              description: 'Session settings are defined per session name.

                Different session_settings for the same session name will be combined/merged.

                '
              keys:
                encapsulation_gre_metadata_tx:
                  type: bool
                header_remove_size:
                  type: int
                  description: Number of bytes to remove from header.
                  convert_types:
                  - str
                access_group:
                  type: dict
                  keys:
                    type:
                      type: str
                      valid_values:
                      - ip
                      - ipv6
                      - mac
                    name:
                      description: ACL name.
                      type: str
                rate_limit_per_ingress_chip:
                  type: str
                  description: "Ratelimit and unit as string.\nExamples:\n  \"100000
                    bps\"\n  \"100 kbps\"\n  \"10 mbps\"\n"
                rate_limit_per_egress_chip:
                  type: str
                  description: "Ratelimit and unit as string.\nExamples:\n  \"100000
                    bps\"\n  \"100 kbps\"\n  \"10 mbps\"\n"
                sample:
                  type: int
                  convert_types:
                  - str
                truncate:
                  type: dict
                  keys:
                    enabled:
                      type: bool
                    size:
                      type: int
                      description: Size in bytes
                      convert_types:
                      - str
      ethernet_segment:
        type: dict
        description: Settings for all or single-active EVPN multihoming.
        keys:
          short_esi:
            type: str
            required: true
            description: 'In format xxxx:xxxx:xxxx or "auto".

              Define a manual short-esi (be careful using this on profiles) or set
              the value to "auto" to automatically generate the value.

              Please see the notes under "EVPN A/A ESI dual and single-attached endpoint
              scenarios" before setting `short_esi: auto`.

              '
          redundancy:
            type: str
            valid_values:
            - all-active
            - single-active
            description: 'If omitted, Port-Channels use the EOS default of all-active.

              If omitted, Ethernet interfaces are configured as single-active.

              '
          designated_forwarder_algorithm:
            type: str
            valid_values:
            - auto
            - modulus
            - preference
            description: "Configure DF algorithm and preferences.\n- auto: Use preference-based
              algorithm and assign preference based on position of device in the 'switches'
              list,\n  e.g., assuming a list of three switches, this would assign
              a preference of 200 to the first switch, 100 to the 2nd, and 0 to the
              third.\n- preference: Set preference for each switch manually using
              designated_forwarder_preferences key.\n- modulus: Use the default modulus-based
              algorithm.\nIf omitted, Port-Channels use the EOS default of modulus.\nIf
              omitted, Ethernet interfaces default to the 'auto' mechanism detailed
              above.\n"
          designated_forwarder_preferences:
            type: list
            description: Manual preference as described above, required only for preference
              algorithm.
            items:
              type: str
              convert_types:
              - int
          dont_preempt:
            type: bool
            description: Disable preemption for single-active forwarding when auto/manual
              DF preference is configured.
      port_channel:
        type: dict
        description: Used for port-channel adapter.
        keys:
          mode:
            type: str
            description: Port-Channel Mode.
            valid_values:
            - active
            - passive
            - 'on'
          channel_id:
            type: int
            convert_types:
            - str
            description: 'Port-Channel ID.

              If no channel_id is specified, an id is generated from the first switch
              port in the port channel.

              '
          description:
            type: str
            description: 'By default the description is built leveraging `<peer>`
              name or `adapter.description` when defined.

              When this key is defined, it will append its content to the physical
              port description.

              '
          enabled:
            type: bool
            default: true
            description: 'Port-Channel administrative state.

              Setting to false will set port to ''shutdown'' in intended configuration.

              '
          esi:
            type: str
            description: Format xxxx:xxxx:xxxx.
            deprecation:
              warning: true
              removed: true
              remove_in_version: 4.0.0
              new_key: short_esi
          short_esi:
            type: str
            description: In format xxxx:xxxx:xxxx or "auto".
          lacp_fallback:
            type: dict
            description: LACP fallback configuration.
            keys:
              mode:
                type: str
                valid_values:
                - static
                description: Currently only static mode is supported.
              timeout:
                type: int
                convert_types:
                - str
                description: Timeout in seconds. EOS default is 90 seconds.
          lacp_timer:
            type: dict
            description: LACP timer configuration. Applies only when Port-channel
              mode is not "on".
            keys:
              mode:
                type: str
                valid_values:
                - normal
                - fast
                description: LACP mode for interface members.
              multiplier:
                type: int
                convert_types:
                - str
                description: Number of LACP BPDUs lost before deeming the peer down.
                  EOS default is 3.
          subinterfaces:
            type: list
            description: 'Port-Channel L2 Subinterfaces

              Subinterfaces are only supported on routed port-channels, which means
              they cannot be configured on MLAG port-channels.

              Setting short_esi: auto generates the short_esi automatically using
              a hash of configuration elements.

              Please see the notes under "EVPN A/A ESI dual-attached endpoint scenario"
              before setting short_esi: auto.

              '
            items:
              type: dict
              keys:
                number:
                  type: int
                  convert_types:
                  - str
                  description: Subinterface number
                short_esi:
                  type: str
                  description: 'In format xxxx:xxxx:xxxx or "auto"

                    Required for multihomed port-channels with subinterfaces

                    '
                vlan_id:
                  type: int
                  convert_types:
                  - str
                  min: 1
                  max: 4094
                  description: 'VLAN ID to bridge.

                    Default is subinterface number.

                    '
                encapsulation_vlan:
                  type: dict
                  description: 'Client VLAN ID encapsulation.

                    Default is subinterface number.

                    '
                  keys:
                    client_dot1q:
                      type: int
                      convert_types:
                      - str
                      min: 1
                      max: 4094
          raw_eos_cli:
            type: str
            description: EOS CLI rendered directly on the port-channel interface in
              the final EOS configuration.
          structured_config:
            type: dict
            description: Custom structured config added under port_channel_interfaces.<interface>
              for eos_cli_config_gen.
      raw_eos_cli:
        type: str
        description: EOS CLI rendered directly on the ethernet interface in the final
          EOS configuration.
      structured_config:
        type: dict
        description: Custom structured config added under ethernet_interfaces.<interface>
          for eos_cli_config_gen.
  connected_endpoints:
    type: list
    primary_key: name
    convert_types:
    - dict
    description: 'This should be applied to group_vars or host_vars where endpoints
      are connecting.

      `connected_endpoints_keys.key` is one of the keys under "connected_endpoints_keys".

      The default keys are `servers`, `firewalls`, `routers`, `load_balancers`, and
      `storage_arrays`.

      '
    items:
      type: dict
      keys:
        name:
          type: str
          description: Endpoint name will be used in the switchport description.
          required: true
        rack:
          type: str
          description: Rack is used for documentation purposes only.
        adapters:
          type: list
          description: A list of adapters, group by adapters leveraging the same port-profile.
          items:
            $ref: '#/$defs/adapter_config'
            type: dict
            keys:
              switch_ports:
                type: list
                required: true
                description: 'List of switch interfaces.

                  The lists `endpoint_ports`, `switch_ports`, and `switches` must
                  have the same length.

                  '
                items:
                  type: str
                  description: Switchport interface.
              switches:
                type: list
                required: true
                description: 'List of switches.

                  The lists `endpoint_ports`, `switch_ports`, and `switches` must
                  have the same length.

                  '
                items:
                  type: str
                  description: Device
              server_ports:
                type: list
                deprecation:
                  warning: true
                  removed: true
                  new_key: endpoint_ports
                  remove_in_version: 4.0.0
                items:
                  type: str
                  description: Used for documentation purposes
  l3_edge:
    type: dict
    keys:
      p2p_links_ip_pools:
        type: list
        convert_types:
        - dict
        primary_key: name
        secondary_key: ipv4_pool
        items:
          type: dict
          keys:
            name:
              type: str
              required: true
              description: P2P pool name.
            ipv4_pool:
              type: str
              description: IPv4 address/Mask.
            prefix_size:
              type: int
              convert_types:
              - str
              description: Subnet mask size.
              default: 31
              min: 8
              max: 31
      p2p_links_profiles:
        type: list
        convert_types:
        - dict
        primary_key: name
        $ref: '#/$defs/p2p_links'
        items:
          type: dict
          keys:
            name:
              type: str
              required: true
              description: P2P profile name. Any variable supported under p2p_links
                can be inherited from a profile.
      p2p_links:
        type: list
        $ref: '#/$defs/p2p_links'
        items:
          type: dict
          keys:
            nodes:
              type: list
              required: true
            profile:
              type: str
              description: P2P profile name. Profile defined under p2p_profiles.
  network_services:
    type: list
    primary_key: name
    convert_types:
    - dict
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          description: 'Specify a tenant name.

            Tenant provide a construct to group L3 VRFs and L2 VLANs.

            Networks services can be filtered by tenant name.

            '
        mac_vrf_vni_base:
          type: int
          convert_types:
          - str
          min: 0
          max: 16770000
          description: 'Base number for MAC VRF VXLAN Network Identifier (required
            with VXLAN).

            VXLAN VNI is derived from the base number with simple addition.

            i.e. mac_vrf_vni_base = 10000, svi 100 = VNI 10100, svi 300 = VNI 10300.

            '
        mac_vrf_id_base:
          type: int
          convert_types:
          - str
          min: 0
          max: 16770000
          description: 'If not set, "mac_vrf_vni_base" will be used.

            Base number for MAC VRF RD/RT ID (Required unless mac_vrf_vni_base is
            set)

            ID is derived from the base number with simple addition.

            i.e. mac_vrf_id_base = 10000, svi 100 = RD/RT 10100, svi 300 = RD/RT 10300.

            '
        vlan_aware_bundle_number_base:
          type: int
          convert_types:
          - str
          default: 0
          description: 'Base number for VLAN aware bundle RD/RT.

            The "Assigned Number" part of RD/RT is derived from vrf_vni + vlan_aware_bundle_number_base.

            '
        pseudowire_rt_base:
          type: int
          description: 'Pseudowire RT base, used to generate route targets for VPWS
            services.

            Avoid overlapping route target spaces between different services.

            '
          convert_types:
          - str
        enable_mlag_ibgp_peering_vrfs:
          type: bool
          description: 'MLAG iBGP peering per VRF.

            By default an iBGP peering is configured per VRF between MLAG peers on
            separate VLANs.

            Setting enable_mlag_ibgp_peering_vrfs: false under tenant will change
            this default to prevent configuration of these peerings and VLANs for
            all VRFs in the tenant.

            This setting can be overridden per VRF.

            '
        bgp_peer_groups:
          type: list
          primary_key: name
          convert_types:
          - dict
          description: 'List of BGP peer groups definitions.

            This will configure BGP peer groups to be used inside the tenant VRF for
            peering with external devices.

            Since BGP peer groups are configured at higher BGP level, shared between
            VRFs,

            peer_group names should not overlap between VRFs.

            '
          items:
            $ref: eos_cli_config_gen#/keys/router_bgp/keys/peer_groups/items
            type: dict
            keys:
              name:
                type: str
                description: BGP peer group name
              nodes:
                type: list
                items:
                  type: str
                description: 'Nodes is required to restrict configuration of BGP neighbors
                  to certain nodes in the network.

                  If not set the peer-group is created on devices which have a bgp_peer
                  mapped to the corresponding peer_group.

                  '
        evpn_l2_multicast:
          description: "Enable EVPN L2 Multicast for all SVIs and l2vlans within Tenant.\n-
            Multicast group binding is created only for Multicast traffic. BULL traffic
            will use ingress-replication\n- Configures binding between VXLAN, VLAN,
            and multicast group IPv4 address using the following formula:\n  < evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool
            > + < vlan_id - 1 > + < evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool_offset
            >.\n- The recommendation is to assign a /20 block within the 232.0.0.0/8
            Source-Specific Multicast range.\n- Enables `redistribute igmp` on the
            router bgp MAC VRF.\n- When evpn_l2_multicast.enabled is true for a VLAN
            or a tenant, \"igmp snooping\" and \"igmp snooping querier\" will always
            be enabled - overriding those individual settings.\n"
          type: dict
          keys:
            enabled:
              type: bool
            underlay_l2_multicast_group_ipv4_pool:
              type: str
              description: IPv4_address/Mask
            underlay_l2_multicast_group_ipv4_pool_offset:
              type: int
              convert_types:
              - str
        evpn_l3_multicast:
          description: "Enable L3 Multicast for all SVIs and l3vlans within Tenant.\n-
            In the evpn-l3ls design type, this enables L3 EVPN Multicast (aka OISM)\n-
            Multicast group binding for VRF is created only for Multicast traffic.
            BULL traffic will use ingress-replication\n- Configures binding between
            VXLAN, VLAN, and multicast group IPv4 address using the following formula:\n
            \ < l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool > + < vrf_vni
            - 1 > + < l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool_offset
            >.\n- The recommendation is to assign a /20 block within the 232.0.0.0/8
            Source-Specific Multicast range.\n- If enabled on an SVI using the anycast
            default gateway feature, a diagnostic loopback (see below) MUST be configured
            to source IGMP traffic.\n- Enables `evpn multicast` on the router bgp
            VRF.\n- When enabled on an SVI:\n     - If switch is part of an MLAG pair,
            enables \"pim ipv4 sparse-mode\" on the SVI.\n     - If switch is standalone
            or A-A MH, enables \"ip igmp\" on the SVI.\n     - If \"ip address virtual\"
            is configured, enables \"pim ipv4 local-interface\" and uses the diagnostic
            Loopback defined in the VRF\n"
          type: dict
          keys:
            enabled:
              type: bool
            evpn_underlay_l3_multicast_group_ipv4_pool:
              type: str
              description: IPv4_address/Mask
              required: true
            evpn_underlay_l3_multicast_group_ipv4_pool_offset:
              type: int
              convert_types:
              - str
            evpn_peg:
              type: list
              description: 'For each group of nodes, allow configuration of EVPN PEG
                options.

                The first group of settings where the device''s hostname is present
                in the ''nodes'' list will be used.

                '
              items:
                type: dict
                keys:
                  nodes:
                    description: A description will be applied to all nodes with RP
                      addresses configured if not set.
                    type: list
                    items:
                      type: str
                  transit:
                    description: Enable EVPN PEG transit mode.
                    type: bool
        pim_rp_addresses:
          description: 'For each group of nodes, allow configuration of RP Addresses
            & associated groups.

            '
          type: list
          items:
            type: dict
            keys:
              rps:
                description: List of Rendevouz Points
                type: list
                min_length: 1
                items:
                  type: str
                  description: RP address.
              nodes:
                description: 'Restrict configuration to specific nodes.

                  Configuration Will be applied to all nodes if not set.

                  '
                type: list
                items:
                  type: str
              groups:
                type: list
                items:
                  type: str
                  description: Group_prefix/mask
        igmp_snooping_querier:
          description: 'Enable IGMP snooping querier for each SVI/l2vlan within tenant,
            by default using IP address of Loopback 0.

            When enabled, IGMP snooping querier will only be configured on L3 devices,
            i.e., uplink_type: p2p.

            '
          type: dict
          keys:
            enabled:
              type: bool
              description: Will be enabled automatically if "evpn_l2_multicast" is
                enabled.
            source_address:
              type: str
              format: ipv4
              description: Default IP address of Loopback0
            version:
              type: int
              convert_types:
              - str
              valid_values:
              - 1
              - 2
              - 3
              default: 2
        evpn_l2_multi_domain:
          type: bool
          default: true
          description: Explicitly extend all VLANs/VLAN-Aware Bundles inside the tenant
            to remote EVPN domains.
        vrfs:
          type: list
          primary_key: name
          convert_types:
          - dict
          description: 'VRF "default" is supported under network-services. Currently
            the supported options for "default" vrf are route-target,

            route-distinguisher settings, structured_config, raw_eos_cli in bgp and
            SVIs are the only supported interface type.

            Vlan-aware-bundles are supported as well inside default vrf. OSPF is not
            supported currently.

            '
          items:
            type: dict
            keys:
              name:
                type: str
              address_families:
                type: list
                items:
                  type: str
                  valid_values:
                  - evpn
                  - vpn-ipv4
                  - vpn-ipv6
              description:
                type: str
                description: VRF description
              vrf_vni:
                type: int
                convert_types:
                - str
                min: 1
                max: 16777215
                description: 'Required if "vrf_id" is not set.

                  The VRF VNI range is not limited, but if vrf_id is not set, "vrf_vni"
                  is used for calculating MLAG iBGP peering vlan id.

                  See "mlag_ibgp_peering_vrfs.base_vlan" for details.

                  If vrf_vni > 10000 make sure to adjust "mac_vrf_vni_base" accordingly
                  to avoid overlap.

                  '
              vrf_id:
                type: int
                convert_types:
                - str
                min: 1
                max: 1024
                description: 'Required if "vrf_vni" is not set.

                  "vrf_id" is used as default value for "vrf_vni" and "ospf.process_id"
                  unless those are set.

                  "vrf_id" is preferred over "vrf_vni" for VRF RD/RT ID before vrf_vni

                  "vrf_id" is preferred over "vrf_vni" for MLAG iBGP peering vlan,
                  see "mlag_ibgp_peering_vrfs.base_vlan" for details

                  '
              mlag_ibgp_peering_ipv4_pool:
                type: str
                description: 'IPv4_address/Mask

                  The subnet used for iBGP peering in the VRF.

                  Each MLAG pair will be assigned a subnet based on the ID of the
                  primary MLAG switch

                  If not set, "mlag_peer_l3_ipv4_pool" or "mlag_peer_ipv4_pool" will
                  be used

                  '
              ip_helpers:
                type: list
                primary_key: ip_helper
                convert_types:
                - dict
                description: IP helper for DHCP relay
                items:
                  type: dict
                  keys:
                    ip_helper:
                      type: str
                      description: IPv4 DHCP server IP
                    source_interface:
                      type: str
                      description: Interface name
                    source_vrf:
                      type: str
                      description: VRF to originate DHCP relay packets to DHCP server.
                        If not set, uses current VRF
              enable_mlag_ibgp_peering_vrfs:
                type: bool
                description: 'MLAG iBGP peering per VRF.

                  By default an iBGP peering is configured per VRF between MLAG peers
                  on separate VLANs.

                  Setting enable_mlag_ibgp_peering_vrfs: false under vrf will change
                  this default and/or override the tenant-wide setting

                  '
              mlag_ibgp_peering_vlan:
                type: int
                convert_types:
                - str
                description: 'Manually define the VLAN used on the MLAG pair for the
                  iBGP session.

                  By default this parameter is calculated using the following formula:
                  <mlag_ibgp_peering_vrfs.base_vlan> + <vrf_id> - 1

                  '
                min: 1
                max: 4096
              vtep_diagnostic:
                type: dict
                description: 'Enable VTEP Network diagnostics.

                  This will create a loopback with virtual source-nat enable to perform
                  diagnostics from the switch

                  '
                keys:
                  loopback:
                    type: int
                    convert_types:
                    - str
                    description: 'Loopback interface number, required (when vtep_diagnotics
                      defined)

                      '
                    min: 2
                    max: 2100
                  loopback_description:
                    type: str
                    description: Provide a custom description for loopback interface.
                  loopback_ip_range:
                    type: str
                    description: 'IPv4_address/Mask

                      Loopback ip range, a unique ip is derived from this ranged and
                      assigned

                      to each l3 leaf based on it''s unique id, ptional (loopback
                      is not created unless loopback_ip_range or loopback_ip_pools
                      are set)

                      '
                  loopback_ip_pools:
                    type: list
                    description: 'For inventories with multiple PODs a loopback range
                      can be set per POD to avoid overlaps.

                      This only takes effect when loopback_ip_range is not defined,
                      ptional (loopback is not created unless loopback_ip_range or
                      loopback_ip_pools are set)

                      '
                    items:
                      type: dict
                      keys:
                        pod:
                          type: str
                          description: POD name
                        ipv4_pool:
                          type: str
                          description: IPv4_address/Mask
              ospf:
                type: dict
                description: 'Router OSPF configuration.

                  This will create an OSPF routing instance in the tenant VRF. If
                  there is no nodes definition, the OSPF instance will be

                  created on all leafs where the VRF is deployed. This will also cause
                  automatic OSPF redistribution into BGP unless

                  explicitly turned off with "redistribute_ospf: false".

                  '
                keys:
                  enabled:
                    type: bool
                  process_id:
                    type: int
                    convert_types:
                    - str
                    description: If not set, "vrf_id" will be used.
                  router_id:
                    type: str
                    description: If not set, switch router_id will be used.
                  max_lsa:
                    type: int
                    convert_types:
                    - str
                  bfd:
                    type: bool
                    default: false
                  redistribute_bgp:
                    type: dict
                    keys:
                      enabled:
                        type: bool
                        default: true
                      route_map:
                        type: str
                        description: Route-map name
                  redistribute_connected:
                    type: dict
                    keys:
                      enabled:
                        type: bool
                        default: false
                      route_map:
                        type: str
                        description: Route-map name
                  nodes:
                    type: list
                    items:
                      type: str
                      description: Hostname
              redistribute_ospf:
                type: bool
                default: true
                description: Non-selectively enabling or disabling redistribute ospf
                  inside the VRF.
              evpn_l3_multicast:
                type: dict
                description: 'Explicitly enable or disable evpn_l3_multicast to override
                  setting of `<network_services_key>.[].evpn_l3_multicast.enabled`.

                  Allow override of `<network_services_key>.[].evpn_l3_multicast`
                  node_settings.

                  '
                keys:
                  enabled:
                    type: bool
                  evpn_peg:
                    type: list
                    description: For each group of nodes, allow configuration of EVPN
                      PEG features.
                    items:
                      type: dict
                      keys:
                        nodes:
                          type: list
                          description: 'Restrict configuration to specific nodes.

                            Will apply to all nodes with RP addresses configured if
                            not set.

                            '
                        transit:
                          type: bool
                          default: false
                          description: Enable EVPN PEG transit mode.
              pim_rp_addresses:
                description: 'For each group of nodes, allow configuration of RP Addresses
                  & associated groups.

                  '
                type: list
                items:
                  type: dict
                  keys:
                    rps:
                      description: A minimum of one RP must be specified.
                      type: list
                      items:
                        type: str
                        description: RP address.
                    nodes:
                      description: 'Restrict configuration to specific nodes.

                        Configuration Will be applied to all nodes if not set.

                        '
                      type: list
                      items:
                        type: str
                    groups:
                      type: list
                      items:
                        type: str
                        description: Group_prefix/mask
              evpn_l2_multi_domain:
                type: bool
                description: 'Explicitly extend all VLANs/VLAN-Aware Bundles inside
                  the VRF to remote EVPN domains.

                  Overrides `<network_services_key>.[].evpn_l2_multi_domain`.

                  '
              svis:
                type: list
                primary_key: id
                convert_types:
                - dict
                description: 'List of SVIs

                  This will create both the L3 SVI and L2 VLAN based on filters applied
                  to the node..

                  '
                items:
                  $ref: '#/$defs/svi'
                  type: dict
                  keys:
                    id:
                      type: int
                      convert_types:
                      - str
                      description: SVI interface id and VLAN id.
                      min: 1
                      max: 4096
                    name:
                      type: str
                      description: VLAN name
                      required: true
                    profile:
                      type: str
                      description: 'SVI profile name to apply.

                        SVI can refer to one svi_profile which again can refer to
                        another svi_profile to inherit settings in up to two levels
                        (svi -> svi_profile -> svi_parent_profile).

                        '
              l3_interfaces:
                type: list
                description: 'List of L3 interfaces.

                  This will create IP routed interface inside VRF. Length of interfaces,
                  nodes and ip_addresses must match.

                  '
                items:
                  type: dict
                  keys:
                    interfaces:
                      type: list
                      items:
                        type: str
                        description: Interface name
                    encapsulation_dot1q_vlan:
                      type: list
                      description: For sub-interfaces the dot1q vlan is derived from
                        the interface name by default, but can also be specified.
                      items:
                        type: int
                        convert_types:
                        - str
                        min: 1
                        max: 4094
                    ip_addresses:
                      type: list
                      items:
                        type: str
                        description: IPv4_address/Mask
                    nodes:
                      type: list
                      items:
                        type: str
                        description: Node
                    description:
                      type: str
                    descriptions:
                      type: list
                      items:
                        type: str
                      description: '"descriptions" has precedence over "description"

                        '
                    enabled:
                      type: bool
                    mtu:
                      type: int
                      convert_types:
                      - str
                    ospf:
                      type: dict
                      description: OSPF interface configuration
                      keys:
                        enabled:
                          type: bool
                        point_to_point:
                          type: bool
                          default: false
                        area:
                          type: int
                          convert_types:
                          - str
                          description: OSPF area id
                          default: 0
                        cost:
                          type: int
                          convert_types:
                          - str
                          description: OSPF link cost
                        authentication:
                          type: str
                          valid_values:
                          - simple
                          - message-digest
                        simple_auth_key:
                          type: str
                          description: Password used with simple authentication
                        message_digest_keys:
                          type: list
                          items:
                            type: dict
                            keys:
                              id:
                                type: int
                                convert_types:
                                - str
                              hash_algorithm:
                                type: str
                                valid_values:
                                - md5
                                - sha1
                                - sha256
                                - sha384
                                - sha512
                                default: sha512
                              key:
                                type: str
                                description: Key password
                    pim:
                      type: dict
                      description: 'Enable PIM sparse-mode on the interface; requires
                        "evpn_l3_multicast" to be enabled on the VRF/Tenant

                        Enabling this implicitly makes the device a PIM External Gateway
                        (PEG) in EVPN designs only.

                        At least one RP address must be configured for EVPN PEG to
                        be configured.

                        '
                      keys:
                        enabled:
                          type: bool
                    structured_config:
                      type: dict
                      description: 'Custom structured config added under vlan_interfaces.<interface>
                        for eos_cli_config_gen.

                        Overrides the setting on SVI level.

                        '
                    raw_eos_cli:
                      type: str
                      description: 'EOS CLI rendered directly on the VLAN interface
                        in the final EOS configuration

                        Overrides the setting on SVI level.

                        '
              static_routes:
                type: list
                description: 'List of static routes for v4 and/or v6.

                  This will create static routes inside the tenant VRF.

                  If nodes are not specified, all l3leafs that carry the VRF will
                  also be applied the static routes.

                  If a node has a static route in the VRF, redistribute static will
                  be automatically enabled in that VRF.

                  This automatic behavior can be overridden non-selectively with the
                  redistribute_static knob for the VRF.

                  '
                items:
                  type: dict
                  keys:
                    destination_address_prefix:
                      type: str
                      description: IPv4_address
                    gateway:
                      type: str
                      description: IPv4_address
                    track_bfd:
                      type: bool
                      description: Track next-hop using BFD
                    distance:
                      type: int
                      convert_types:
                      - str
                      min: 1
                      max: 255
                    tag:
                      type: int
                      convert_types:
                      - str
                      min: 0
                      max: 4294967295
                    name:
                      type: str
                      description: description
                    metric:
                      type: int
                      convert_types:
                      - str
                      min: 0
                      max: 4294967295
                    interface:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
              ipv6_static_routes:
                type: list
                items:
                  type: dict
                  keys:
                    destination_address_prefix:
                      type: str
                      description: IPv6_address
                    gateway:
                      type: str
                    track_bfd:
                      type: bool
                      description: Track next-hop using BFD
                    distance:
                      type: int
                      convert_types:
                      - str
                      min: 1
                      max: 255
                    tag:
                      type: int
                      convert_types:
                      - str
                      min: 0
                      max: 4294967295
                    name:
                      type: str
                      description: description
                    metric:
                      type: int
                      convert_types:
                      - str
                      min: 0
                      max: 4294967295
                    interface:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
              redistribute_static:
                type: bool
                description: Non-selectively enabling or disabling redistribute static
                  inside the VRF.
              bgp_peers:
                type: list
                primary_key: ip_address
                convert_types:
                - dict
                description: 'List of BGP peer definitions.

                  This will configure BGP neighbors inside the tenant VRF for peering
                  with external devices.

                  The configured peer will automatically be activated for ipv4 or
                  ipv6 address family based on the ip address.

                  Note, only ipv4 and ipv6 address families are currently supported
                  in eos_designs.

                  For other address families, use custom_structured configuration
                  with eos_cli_config_gen.

                  '
                items:
                  type: dict
                  keys:
                    ip_address:
                      type: str
                      description: IPv4_address or IPv6_address
                    peer_group:
                      type: str
                      description: Peer group name.
                    remote_as:
                      type: int
                      convert_types:
                      - str
                      description: Remote ASN
                    description:
                      type: str
                    password:
                      type: str
                      description: Encrypted password
                    send_community:
                      type: str
                      description: '''all'' or a combination of ''standard'', ''extended'',
                        ''large'' and ''link-bandwidth (w/options)''

                        '
                    next_hop_self:
                      type: bool
                    timers:
                      type: str
                      description: BGP Keepalive and Hold Timer values in seconds
                        as string <0-3600> <0-3600>
                    maximum_routes:
                      type: int
                      convert_types:
                      - str
                      min: 0
                      max: 4294967294
                      description: Maximum number of routes (0 means unlimited)
                    default_originate:
                      type: dict
                      keys:
                        always:
                          type: bool
                    update_source:
                      type: str
                    ebgp_multihop:
                      type: int
                      convert_types:
                      - str
                      min: 1
                      max: 255
                      description: Time-to-live in range of hops
                    nodes:
                      type: list
                      items:
                        type: str
                      description: Nodes is required to restrict configuration of
                        BGP neighbors to certain nodes in the network.
                    set_ipv4_next_hop:
                      type: str
                      description: 'IPv4_address

                        Next hop settings can be either ipv4 or ipv6 for one neighbor,
                        this will be applied by a uniquely generated route-map per
                        neighbor.

                        Next hop takes precedence over route_map_out.

                        '
                    set_ipv6_next_hop:
                      type: str
                      description: 'IPv6_address

                        Next hop settings can be either ipv4 or ipv6 for one neighbor,
                        this will be applied by a uniquely generated route-map per
                        neighbor.

                        Next hop takes precedence over route_map_out.

                        '
                    route_map_out:
                      type: str
                      description: Route-map name
                    route_map_in:
                      type: str
                      description: Route-map name
                    prefix_list_in:
                      type: str
                      description: Prefix list name
                    prefix_list_out:
                      type: str
                      description: Prefix list name
                    local_as:
                      type: str
                      convert_types:
                      - int
                      description: 'Local BGP ASN

                        eg. "65001.1200"

                        '
                    weight:
                      type: int
                      convert_types:
                      - str
                      min: 0
                      max: 65535
                    bfd:
                      type: bool
              bgp:
                type: dict
                keys:
                  raw_eos_cli:
                    type: str
                    description: 'EOS CLI rendered directly on the VLAN interface
                      in the final EOS configuration

                      Overrides the setting on SVI level.

                      '
                  structured_config:
                    type: dict
                    description: 'Custom structured config added under vlan_interfaces.<interface>
                      for eos_cli_config_gen.

                      Overrides the setting on SVI level.

                      '
              bgp_peer_groups:
                type: list
                description: 'List of BGP peer groups definitions.

                  This will configure BGP peer groups to be used inside the tenant
                  VRF for peering with external devices.

                  Since BGP peer groups are configured at higher BGP level, shared
                  between VRFs,

                  peer_group names should not overlap between VRFs.

                  '
                items:
                  $ref: eos_cli_config_gen#/keys/router_bgp/keys/peer_groups/items
                  type: dict
                  keys:
                    name:
                      type: str
                      description: BGP peer group name
                    nodes:
                      type: list
                      items:
                        type: str
                      description: 'Nodes is required to restrict configuration of
                        BGP neighbors to certain nodes in the network.

                        If not set the peer-group is created on devices which have
                        a bgp_peer mapped to the corresponding peer_group.

                        '
              additional_route_targets:
                type: list
                description: Configuration of extra route-targets for this VRF. Useful
                  for route-leaking or gateway between address families.
                items:
                  type: dict
                  keys:
                    type:
                      type: str
                      valid_values:
                      - import
                      - export
                    address_family:
                      type: str
                    route_target:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
                      description: 'Nodes is required to restrict configuration of
                        BGP neighbors to certain nodes in the network.

                        '
              raw_eos_cli:
                type: str
                description: 'EOS CLI rendered directly on the VLAN interface in the
                  final EOS configuration

                  Overrides the setting on SVI level.

                  '
              structured_config:
                type: dict
                description: 'Custom structured config added under vlan_interfaces.<interface>
                  for eos_cli_config_gen.

                  Overrides the setting on SVI level.

                  '
        l2vlans:
          type: list
          primary_key: id
          convert_types:
          - dict
          description: Define L2 network services organized by vlan id.
          items:
            type: dict
            keys:
              id:
                type: int
                convert_types:
                - str
                min: 1
                max: 4094
                description: VLAN ID
              vni_override:
                type: int
                convert_types:
                - str
                min: 1
                max: 16777215
                description: 'By default the VNI will be derived from mac_vrf_vni_base

                  The vni_override, allows to override this value and statically define
                  it.

                  '
              rt_override:
                type: int
                convert_types:
                - str
                min: 1
                max: 16777215
                description: 'By default the MAC VRF RD/RT ID will be derived from
                  mac_vrf_id_base

                  The rt_override allows us to override this value and statically
                  define it.

                  '
              name:
                type: str
                required: true
                description: VLAN name
              tags:
                type: list
                description: 'Tags leveraged for networks services filtering

                  Tags are matched against filter.tags defined under Fabric Topology
                  variables

                  Tags are also matched against the node_group name under Fabric Topology
                  variables

                  '
                items:
                  type: str
                  default: all
              vxlan:
                type: bool
                default: true
                description: Extend this L2VLAN over VXLAN
              trunk_groups:
                type: list
                items:
                  type: str
                  description: 'Trunk groups are used for limiting vlans to trunk
                    ports assigned to the same trunk group

                    Requires enable_trunk_groups: true

                    '
              evpn_l2_multicast:
                type: dict
                description: 'Explicitly enable or disable evpn_l2_multicast to override
                  setting of `<network_services_key>.[].evpn_l2_multicast.enabled`.

                  When evpn_l2_multicast.enabled is set to true for a vlan or a tenant,
                  igmp snooping and igmp snooping querier will always be enabled,
                  overriding those individual settings.

                  '
                keys:
                  enabled:
                    type: bool
              igmp_snooping_enabled:
                type: bool
                default: true
                description: Activate or deactivate IGMP snooping
              igmp_snooping_querier:
                type: dict
                description: 'Enable igmp snooping querier, by default using IP address
                  of Loopback 0.

                  When enabled, igmp snooping querier will only be configured on l3
                  devices, i.e., uplink_type: p2p.

                  '
                keys:
                  enabled:
                    type: bool
                    description: Will be enabled automatically if evpn_l2_multicast
                      is enabled.
                  source_address:
                    type: str
                    description: 'IPv4_address

                      If not set, IP address of "Loopback0" will be used.

                      '
                  version:
                    type: int
                    convert_types:
                    - str
                    valid_values:
                    - 1
                    - 2
                    - 3
                    default: 2
              bgp:
                type: dict
                keys:
                  structured_config:
                    type: dict
                    description: 'Structured configuration for eos_cli_config_gen
                      rendered on router_bgp.vlans.

                      This configuration will not be applied to vlan aware bundles.

                      '
                  raw_eos_cli:
                    type: str
                    description: 'EOS cli commands rendered on router_bgp.vlans.

                      This configuration will not be applied to vlan aware bundles.

                      '
        point_to_point_services:
          type: list
          primary_key: name
          description: 'Point to point services (pseudowires).

            Only supported for node types with "network_services.l1: true".

            By default this is only set for node type "pe" with "design.type: mpls"

            '
          items:
            type: dict
            keys:
              name:
                type: str
                description: Pseudowire name
              type:
                type: str
                default: vpws-pseudowire
                valid_values:
                - vpws-pseudowire
              subinterfaces:
                type: list
                description: Subinterfaces will create subinterfaces and additional
                  pseudowires/patch panel config for each endpoint.
                primary_key: number
                items:
                  type: dict
                  keys:
                    number:
                      type: int
                      description: Subinterface number
                      convert_types:
                      - str
              endpoints:
                type: list
                description: Pseudowire terminating endpoints. Must have exactly two
                  items.
                min_length: 2
                max_length: 2
                items:
                  type: dict
                  keys:
                    id:
                      type: int
                      required: true
                      convert_types:
                      - str
                      description: Pseudowire ID on this endpoint
                    nodes:
                      type: list
                      description: 'Usually one node. With ESI multihoming we support
                        two nodes per pseudowire endpoint

                        '
                      required: true
                      min_length: 1
                      items:
                        type: str
                    interfaces:
                      type: list
                      description: 'Interfaces patched to the pseudowire on this endpoints.

                        The list of interfaces is mapped to the list of nodes, so
                        they must have the same length.

                        '
                      required: true
                      min_length: 1
                      items:
                        type: str
                    port_channel:
                      type: dict
                      keys:
                        mode:
                          type: str
                          valid_values:
                          - active
                          - 'on'
                        short_esi:
                          type: str
              lldp_disable:
                type: bool
                description: Disable LLDP RX/TX on port mode pseudowire services
  node_type:
    type: dict
    keys:
      defaults:
        type: dict
        keys:
          id:
            description: Unique identifier used for IP addressing and other algorithms.
            type: int
            convert_types:
            - str
          platform:
            description: Arista platform family.
            type: str
          mac_address:
            type: str
            description: Leverage to document management interface mac address.
          system_mac_address:
            type: str
            description: 'System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".

              Set to the same MAC address as available in "show version" on the device.

              "system_mac_address" can also be set directly as a hostvar.

              If both are set, the setting under "Fabric Topology" takes precedence.

              '
          serial_number:
            type: str
            description: 'Set to the Serial Number of the device

              For  now only used for documentation purpose in the fabric documentation

              and part of the structured_config

              "serial_number" can also be set directly as a hostvar.

              If both are set, the setting under "Fabric Topology" takes precedence.

              '
          rack:
            description: Rack that the switch is located in (only used in snmp_settings
              location).
            type: str
          mgmt_ip:
            description: Node management interface IPv4 address.
            type: str
            format: cidr
          ipv6_mgmt_ip:
            description: Node management interface IPv6 address.
            type: str
            format: cidr
          mgmt_interface:
            description: 'Management Interface Name.

              Default -> platform_management_interface -> mgmt_interface -> "Management1".

              '
            type: str
          link_tracking:
            description: 'This configures the Link Tracking Group on a switch as well
              as adds the p2p-uplinks of the switch as the upstream interfaces.

              Useful in EVPN multhoming designs.

              '
            type: dict
            keys:
              enabled:
                type: bool
                default: false
              groups:
                type: list
                description: 'Link Tracking Groups.

                  By default a single group named "LT_GROUP1" is defined with default
                  values.

                  Any groups defined under "groups" will replace the default.

                  '
                default:
                - name: LT_GROUP1
                items:
                  type: dict
                  keys:
                    name:
                      type: str
                      description: Tracking group name.
                    recovery_delay:
                      type: int
                      convert_types:
                      - str
                      min: 0
                      max: 3600
                      description: default -> platform_settings_mlag_reload_delay
                        -> 300.
                    links_minimum:
                      type: int
                      convert_types:
                      - str
                      min: 1
                      max: 100000
          lacp_port_id_range:
            description: 'This will generate the "lacp port-id range", "begin" and
              "end" values based on node "id" and the number of nodes in the "node_group".

              Unique LACP port-id ranges are recommended for EVPN Multihoming designs.

              '
            type: dict
            keys:
              enabled:
                type: bool
                default: false
              size:
                description: Recommended size > = number of ports in the switch.
                type: int
                convert_types:
                - str
                default: 128
              offset:
                description: 'Offset is used to avoid overlapping port-id ranges of
                  different switches.

                  Useful when a "connected-endpoint" is connected to switches in different
                  "node_groups".

                  '
                type: int
                convert_types:
                - str
                default: 0
          always_configure_ip_routing:
            type: bool
            default: false
            description: 'Force configuration of "ip routing" even on L2 devices.

              Use this to retain behavior of AVD versions below 4.0.0.

              '
          raw_eos_cli:
            description: EOS CLI rendered directly on the root level of the final
              EOS configuration.
            type: str
          structured_config:
            description: Custom structured config for eos_cli_config_gen.
            type: dict
          uplink_ipv4_pool:
            description: IPv4 subnet to use to connect to uplink switches.
            type: str
            format: ipv4_cidr
          uplink_interfaces:
            description: 'Local uplink interfaces

              Each list item supports range syntax that can be expanded into a list
              of interfaces.

              If uplink_interfaces is not defined, platform-specific defaults (defined
              under default_interfaces) will be used instead.

              Please note that default_interfaces are not defined by default, you
              should define these yourself.

              '
            type: list
            items:
              type: str
              pattern: Ethernet[\d/]+
          uplink_switch_interfaces:
            description: Interfaces located on uplink switches
            type: list
            items:
              type: str
              pattern: Ethernet[\d/]+
          uplink_switches:
            type: list
            items:
              type: str
              required: true
              description: 'Hostname of uplink switch.

                If parallel uplinks are in use, update max_parallel_uplinks below
                and specify each uplink switch multiple times.

                e.g. uplink_switches: [ ''DC1-SPINE1'', ''DC1-SPINE1'', ''DC1-SPINE2'',
                ''DC1-SPINE2'' ].

                '
          uplink_interface_speed:
            description: 'Set point-to-Point interface speed and will apply to uplink
              interfaces on both ends.

              interface_speed or forced interface_speed or auto interface_speed.

              '
            type: str
          max_uplink_switches:
            type: int
            convert_types:
            - str
            description: 'Maximum number of uplink switches.

              Changing this value may change IP Addressing on uplinks.

              Can be used to reserve IP space for future expansions.

              '
          max_parallel_uplinks:
            type: int
            convert_types:
            - str
            description: 'Number of parallel links towards uplink switches.

              Changing this value may change interface naming on uplinks (and corresponding
              downlinks).

              Can be used to reserve interfaces for future parallel uplinks.

              '
          uplink_bfd:
            type: bool
            default: false
            description: Enable bfd on uplink interfaces.
          uplink_native_vlan:
            type: int
            convert_types:
            - str
            min: 1
            max: 4094
            description: 'Only applicable to switches with layer-2 port-channel uplinks.

              A suspended (disabled) vlan will be created in both ends of the link
              unless the vlan is defined under network services.

              By default the uplink will not have a native_vlan configured, so EOS
              defaults to vlan 1.

              '
          uplink_ptp:
            description: Enable PTP on all infrastructure links.
            type: dict
            keys:
              enable:
                type: bool
                default: false
          uplink_macsec:
            description: Enable MacSec on all uplinks.
            type: dict
            keys:
              profile:
                type: str
          uplink_structured_config:
            type: dict
            description: 'Custom structured config applied to "uplink_interfaces",
              and "uplink_switch_interfaces".

              When uplink_type == "p2p", custom structured config added under ethernet_interfaces.<interface>
              for eos_cli_config_gen overrides the settings on the ethernet interface
              level.

              When uplink_type == "port-channel", custom structured config added under
              port_channel_interfaces.<interface> for eos_cli_config_gen overrides
              the settings on the port-channel interface level.

              "uplink_structured_config" is applied after "structured_config", so
              it can override "structured_config" defined on node-level.

              '
          mlag_port_channel_structured_config:
            type: dict
            description: 'Custom structured config applied to MLAG peer link port-channel
              id.

              Added under port_channel_interfaces.<interface> for eos_cli_config_gen.

              Overrides the settings on the port-channel interface level.

              "mlag_port_channel_structured_config" is applied after "structured_config",
              so it can override "structured_config" defined on node-level.

              '
          mlag_peer_vlan_structured_config:
            type: dict
            description: 'Custom structured config applied to MLAG Peer Link (control
              link) SVI interface id.

              Added under vlan_interfaces.<interface> for eos_cli_config_gen.

              Overrides the settings on the vlan interface level.

              "mlag_peer_vlan_structured_config" is applied after "structured_config",
              so it can override "structured_config" defined on node-level.

              '
          mlag_peer_l3_vlan_structured_config:
            type: dict
            description: 'Custom structured config applied to MLAG underlay L3 peering
              SVI interface id.

              Added under vlan_interfaces.<interface> for eos_cli_config_gen.

              Overrides the settings on the vlan interface level.

              "mlag_peer_l3_vlan_structured_config" is applied after "structured_config",
              so it can override "structured_config" defined on node-level.

              '
          short_esi:
            description: 'short_esi only valid for l2leaf devices using port-channel
              uplink.

              Setting short_esi to "auto" generates the short_esi automatically using
              a hash of configuration elements.

              < 0000:0000:0000 | auto >.

              '
            type: str
          isis_system_id_prefix:
            description: (4.4 hexadecimal).
            type: str
            pattern: '[0-9a-f]{4}\.[0-9a-f]{4}'
          isis_maximum_paths:
            description: Number of path to configure in ECMP for ISIS.
            type: int
            convert_types:
            - str
          is_type:
            type: str
            valid_values:
            - level-1-2
            - level-1
            - level-2
            default: level-2
          node_sid_base:
            description: Node-SID base for isis-sr underlay variants. Combined with
              node id to generate ISIS-SR node-SID.
            type: int
            convert_types:
            - str
            default: 0
          loopback_ipv4_pool:
            description: IPv4 subnet for Loopback0 allocation.
            type: str
            format: ipv4_cidr
          vtep_loopback_ipv4_pool:
            description: IPv4 subnet for VTEP-Loopback allocation.
            type: str
            format: ipv4_cidr
          loopback_ipv4_offset:
            description: 'Offset all assigned loopback IP addresses.

              Required when the < loopback_ipv4_pool > is same for 2 different node_types
              (like spine and l3leaf) to avoid over-lapping IPs.

              For example, set the minimum offset l3leaf.defaults.loopback_ipv4_offset:
              < total # spine switches > or vice versa.

              '
            type: int
            convert_types:
            - str
            default: 0
          loopback_ipv6_pool:
            description: IPv6 subnet for Loopback0 allocation.
            type: str
            format: ipv6_cidr
          loopback_ipv6_offset:
            description: 'Offset all assigned loopback IPv6 addresses.

              Required when the < loopback_ipv6_pool > is same for 2 different node_types
              (like spine and l3leaf) to avoid overlapping IPs.

              For example, set the minimum offset l3leaf.defaults.loopback_ipv6_offset:
              < total # spine switches > or vice versa.

              '
            type: int
            convert_types:
            - str
            default: 0
          vtep_loopback:
            description: Set VXLAN source interface.
            type: str
            pattern: Loopback[\d/]+
          bgp_as:
            description: Required with eBGP.
            type: str
            convert_types:
            - int
            - float
          bgp_defaults:
            description: List of EOS commands to apply to BGP daemon.
            type: list
            items:
              type: str
          evpn_role:
            type: str
            description: Acting role in EVPN control plane. Default is set in node_type
              definition from node_type_keys.
            valid_values:
            - client
            - server
            - none
          evpn_route_servers:
            description: List of nodes acting as EVPN Route-Servers / Route-Reflectors.
            type: list
            items:
              type: str
          evpn_services_l2_only:
            description: 'Possibility to prevent configuration of Tenant VRFs and
              SVIs.

              Override node definition "network_services_l3" from node_type_keys.

              This allows support for centralized routing.

              '
            type: bool
            default: false
          filter:
            description: 'Filter L3 and L2 network services based on tenant and tags
              (and operation filter).

              If filter is not defined it will default to all.

              '
            type: dict
            keys:
              tenants:
                type: list
                items:
                  type: str
                default:
                - all
              tags:
                type: list
                items:
                  type: str
                default:
                - all
              always_include_vrfs_in_tenants:
                description: 'List of tenants where VRFs will be configured even if
                  VLANs are not included in tags

                  Useful for L3 "border" leaf.

                  '
                type: list
                items:
                  type: str
              only_vlans_in_use:
                type: bool
                default: false
                description: 'Only configure VLANs, SVIs, VRFs in use by connected
                  endpoints or downstream L2 switches.

                  Note! This feature only considers configuration managed by eos_designs.

                  This excludes structured_config, custom_structured_configuration_,
                  raw_eos_cli, eos_cli, custom templates, configlets etc.

                  '
          igmp_snooping_enabled:
            description: Activate or deactivate IGMP snooping on device level.
            type: bool
            default: true
          evpn_gateway:
            description: 'Node is acting as EVPN Multi-Domain Gateway.

              New BGP peer-group is generated between EVPN GWs in different domains
              or between GWs and Route Servers.

              Name can be changed under "bgp_peer_groups.evpn_overlay_core" variable.

              L3 rechability for different EVPN GWs must be already in place, it is
              recommended to use DCI & L3 Edge if Route Servers and GWs are not defined
              under the same Ansible inventory.

              '
            type: dict
            keys:
              remote_peers:
                description: 'Define remote peers of the EVPN VXLAN Gateway.

                  If the hostname can be found in the inventory, ip_address and BGP
                  ASN will be automatically populated. Manual override takes precedence.

                  If the peer''s hostname can not be found in the inventory, ip_address
                  and bgp_as must be defined.

                  '
                type: list
                items:
                  type: dict
                  keys:
                    hostname:
                      description: Hostname of remote EVPN GW server.
                      type: str
                    ip_address:
                      description: Peering IP of remote Route Server.
                      type: str
                      format: ipv4
                    bgp_as:
                      description: BGP ASN of remote Route Server.
                      type: str
                      convert_types:
                      - int
                      - float
              evpn_l2:
                description: Enable EVPN Gateway functionality for route-types 2 (MAC-IP)
                  and 3 (IMET).
                type: dict
                keys:
                  enabled:
                    type: bool
                    default: false
              evpn_l3:
                description: Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).
                type: dict
                keys:
                  enabled:
                    type: bool
                    default: false
                  inter_domain:
                    type: bool
                    default: true
          ipvpn_gateway:
            description: 'Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN
              Interworking. The BGP peer group used for this is "bgp_peer_groups.ipvpn_gateway_peers".

              L3 Reachability is required for this to work, the preferred method to
              establish underlay connectivity is to use core_interfaces.

              '
            type: dict
            keys:
              enabled:
                type: bool
                required: true
              evpn_domain_id:
                description: Domain ID to assign to EVPN address family for use with
                  D-path. Format <nn>:<nn>.
                type: str
                default: '65535:1'
              ipvpn_domain_id:
                description: Domain ID to assign to IPVPN address families for use
                  with D-path. Format <nn>:<nn>.
                type: str
                default: '65535:2'
              enable_d_path:
                description: Enable D-path for use with BGP bestpath selection algorithm.
                type: bool
                default: true
              maximum_routes:
                description: Maximum routes to accept from IPVPN remote peers.
                type: int
                convert_types:
                - str
                default: 0
              local_as:
                description: Apply local-as to peering with IPVPN remote peers.
                type: str
                convert_types:
                - int
                default: none
              address_families:
                description: IPVPN address families to enable for remote peers.
                type: list
                items:
                  type: str
                default:
                - vpn-ipv4
              remote_peers:
                type: list
                items:
                  type: dict
                  keys:
                    hostname:
                      description: Hostname of remote IPVPN Peer.
                      type: str
                      required: true
                    ip_address:
                      description: Peering IP of remote IPVPN Peer.
                      type: str
                      format: ipv4
                      required: true
                    bgp_as:
                      description: BGP ASN of remote IPVPN Peer.
                      type: str
                      required: true
                      convert_types:
                      - int
                      - float
          mlag:
            description: Enable / Disable auto MLAG, when two nodes are defined in
              node group.
            type: bool
            default: true
          mlag_dual_primary_detection:
            description: Enable / Disable MLAG dual primary detection.
            type: bool
            default: false
          mlag_ibgp_origin_incomplete:
            description: 'Set origin of routes received from MLAG iBGP peer to incomplete.

              The purpose is to optimize routing for leaf loopbacks from spine perspective
              and

              avoid suboptimal routing via peerlink for control plane traffic.

              '
            type: bool
            default: true
          mlag_interfaces:
            description: 'Each list item supports range syntax that can be expanded
              into a list of interfaces.

              Required when MLAG leafs are present in the topology.

              '
            type: list
            items:
              type: str
          mlag_interfaces_speed:
            description: 'Set MLAG interface speed.

              < interface_speed or forced interface_speed or auto interface_speed
              >.

              '
            type: str
          mlag_peer_l3_vlan:
            description: 'Underlay L3 peering SVI interface id.

              If set to 0 or the same vlan as mlag_peer_vlan, the mlag_peer_vlan will
              be used for L3 peering.

              '
            type: int
            convert_types:
            - str
            - bool
            min: 0
            max: 4094
            default: 4093
          mlag_peer_l3_ipv4_pool:
            description: 'IP address pool used for MLAG underlay L3 peering. IP is
              derived from the node id.

              Required when MLAG leafs present in topology and they are using a separate
              L3 peering VLAN.

              '
            type: str
            format: ipv4_cidr
          mlag_peer_vlan:
            description: MLAG Peer Link (control link) SVI interface id.
            type: int
            convert_types:
            - str
            min: 1
            max: 4094
            default: 4094
          mlag_peer_link_allowed_vlans:
            type: str
          mlag_peer_ipv4_pool:
            description: 'IP address pool used for MLAG Peer Link (control link).
              IP is derived from the node id.

              Required when MLAG leafs present in topology.

              '
            type: str
            format: ipv4_cidr
          mlag_port_channel_id:
            description: 'If not set, the mlag port-channel id is generated based
              on the digits of the first interface present in ''mlag_interfaces''.

              Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and <
              1 - 999999 > for EOS >= 4.25.0F.

              '
            type: int
            convert_types:
            - str
          mlag_domain_id:
            description: MLAG Domain ID. If not set the node group name (Set with
              "group" key) will be used.
            type: str
          spanning_tree_mode:
            type: str
            valid_values:
            - mstp
            - rstp
            - rapid-pvst
            - none
          spanning_tree_priority:
            type: int
            convert_types:
            - str
            default: 32768
          spanning_tree_root_super:
            type: bool
            default: false
          virtual_router_mac_address:
            description: Virtual router mac address for anycast gateway.
            type: str
            format: mac
          inband_mgmt_interface:
            description: 'Pointer to interface used for inband management.

              All configuration must be done using other data models like network
              services or structured_config.

              ''inband_mgmt_interface'' is only used to refer to this interface as
              source in various management protocol settings (future feature).


              On L2 switches, this defaults to Vlan<inband_mgmt_vlan> if either ''inband_mgmt_subnet''
              or ''inband_mgmt_ip'' is set.

              '
            type: str
          inband_mgmt_vlan:
            description: 'VLAN number used for inband management on L2 switches (switches
              using port-channel trunks as uplinks).

              When using ''inband_mgmt_subnet'' the VLAN and SVIs will be created
              automatically on this switch as well as all ''uplink_switches''.

              When using ''inband_mgmt_ip'' the VLAN and SVI will only be created
              on this device and added to uplink trunk. The VLAN and SVI on the parent
              switches must be created using network services data models.'
            type: int
            convert_types:
            - str
            default: 4092
          inband_mgmt_subnet:
            description: 'Optional IP subnet assigned to inband management SVIs on
              L2 switches (switches using port-channels as uplinks).

              Parent l3leafs will have SVI with "ip virtual-router" and host-route
              injection based on ARP.

              This allows all l3leafs to reuse the same subnet across multiple racks
              without VXLAN extension.

              SVI IP address will be assigned as follows:

              virtual-router: <subnet> + 1

              l3leaf A      : <subnet> + 2 (same IP on all l3leaf A)

              l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)

              l2leafs       : <subnet> + 3 + <l2leaf id>

              GW on l2leafs : <subnet> + 1

              Assign range larger than total l2leafs + 5


              Setting is ignored if ''inband_mgmt_ip'' is set.


              This setting is applicable to L2 switches (switches using port-channel
              trunks as uplinks).

              '
            type: str
            format: ipv4_cidr
          inband_mgmt_ip:
            description: 'IP address assigned to the inband management interface set
              with ''inband_mgmt_vlan''.

              This overrides ''inband_mgmt_subnet'', hence all behavior of ''inband_mgmt_subnet''
              is removed.


              If this is set the VLAN and SVI will only be created on the L2 switch
              and added to uplink trunk.

              The VLAN and SVI on the parent switches must be created using network
              services data models.


              This setting is applicable to L2 switches (switches using port-channel
              trunks as uplinks).

              '
            type: str
            format: ipv4_cidr
          inband_mgmt_gateway:
            description: 'Default gateway configured in the ''inband_mgmt_vrf'' when
              using ''inband_mgmt_ip''. Otherwise gateway is derived from ''inband_mgmt_subnet''
              if set.


              This setting is applicable to L2 switches (switches using port-channel
              trunks as uplinks).

              '
            type: str
            format: ipv4
          inband_mgmt_description:
            description: 'Description configured on the Inband Management SVI.


              This setting is only applied on the devices where it is set, it does
              not automatically affect any parent/child devices configuration, so
              it must be set on each applicable node/node-group/node-type as needed.'
            type: str
            default: Inband Management
          inband_mgmt_vlan_name:
            description: 'Name configured on the Inband Management VLAN.

              This setting is only applied on the devices where it is set, it does
              not automatically affect any parent/child devices configuration, so
              it must be set on each applicable node/node-group/node-type as needed.'
            type: str
            default: Inband Management
          inband_mgmt_vrf:
            description: 'VRF configured on the Inband Management Interface.

              The VRF is created if not already created by other means.

              This setting is only applied on the devices where it is set, it does
              not automatically affect any parent/child devices configuration, so
              it must be set on each applicable node/node-group/node-type as needed.'
            type: str
            default: default
          inband_mgmt_mtu:
            description: 'MTU configured on the Inband Management Interface.

              This setting is only applied on the devices where it is set, it does
              not automatically affect any parent/child devices configuration, so
              it must be set on each applicable node/node-group/node-type as needed.'
            type: int
            default: 1500
          inband_management_subnet:
            deprecation:
              warning: true
              new_key: inband_mgmt_subnet
              remove_in_version: 5.0.0
            type: str
            $ref: '#/$defs/node_type/keys/defaults/keys/inband_mgmt_subnet'
          inband_management_vlan:
            deprecation:
              warning: true
              new_key: inband_mgmt_vlan
              remove_in_version: 5.0.0
            type: int
            $ref: '#/$defs/node_type/keys/defaults/keys/inband_mgmt_vlan'
          mpls_overlay_role:
            type: str
            valid_values:
            - client
            - server
            - none
            description: 'Set the default mpls overlay role.

              Acting role in overlay control plane.

              '
          overlay_address_families:
            type: list
            convert_types:
            - str
            items:
              type: str
              valid_values:
              - evpn
              - vpn-ipv4
              - vpn-ipv6
            description: 'Set the default overlay address families.

              '
          mpls_route_reflectors:
            type: list
            convert_types:
            - str
            description: List of inventory hostname acting as MPLS route-reflectors.
            items:
              type: str
              description: Inventory_hostname_of_mpls_route_reflectors.
          bgp_cluster_id:
            type: str
            convert_types:
            - int
            description: Set BGP cluster id.
          ptp:
            type: dict
            keys:
              enabled:
                type: bool
                default: false
              profile:
                type: str
                valid_values:
                - aes67
                - smpte2059-2
                - aes67-r16-2016
                default: aes67-r16-2016
              domain:
                type: int
                convert_types:
                - str
                min: 0
                max: 255
                default: 127
              priority1:
                type: int
                convert_types:
                - str
                min: 0
                max: 255
                description: 'default -> automatically set based on node_type.

                  '
              priority2:
                type: int
                convert_types:
                - str
                min: 0
                max: 255
                description: 'default -> (node_id modulus 256).

                  '
              auto_clock_identity:
                type: bool
                default: true
                description: 'If you prefer to have PTP clock identity be the system
                  MAC-address of the switch, which is the default EOS behaviour, simply
                  disable the automatic PTP clock identity.

                  default -> (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority
                  1 as HEX) + ":00:" + (PTP priority 2 as HEX).

                  '
              clock_identity_prefix:
                type: str
                description: 'PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".

                  By default the 3-byte prefix is "00:1C:73".

                  This can be overridden if auto_clock_identity is set to true (which
                  is the default).

                  '
              clock_identity:
                type: str
                description: 'Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".

                  '
              source_ip:
                type: str
                description: 'By default in EOS, PTP packets are sourced with an IP
                  address from the routed port or from the relevant SVI, which is
                  the recommended behaviour.

                  This can be set manually if required, for example, to a value of
                  "10.1.2.3".

                  '
              ttl:
                type: int
                convert_types:
                - str
              forward_unicast:
                type: bool
                default: false
                description: 'Enable PTP unicast forwarding.

                  '
              dscp:
                type: dict
                keys:
                  general_messages:
                    type: int
                    convert_types:
                    - str
                  event_messages:
                    type: int
                    convert_types:
                    - str
              monitor:
                type: dict
                keys:
                  enabled:
                    type: bool
                    default: true
                  threshold:
                    type: dict
                    keys:
                      offset_from_master:
                        type: int
                        convert_types:
                        - str
                        min: 0
                        max: 1000000000
                        default: 250
                      mean_path_delay:
                        type: int
                        convert_types:
                        - str
                        min: 0
                        max: 1000000000
                        default: 1500
                      drop:
                        type: dict
                        keys:
                          offset_from_master:
                            type: int
                            convert_types:
                            - str
                            min: 0
                            max: 1000000000
                          mean_path_delay:
                            type: int
                            convert_types:
                            - str
                            min: 0
                            max: 1000000000
                  missing_message:
                    type: dict
                    keys:
                      intervals:
                        type: dict
                        keys:
                          announce:
                            type: int
                            convert_types:
                            - str
                            min: 2
                            max: 255
                          follow_up:
                            type: int
                            convert_types:
                            - str
                            min: 2
                            max: 255
                          sync:
                            type: int
                            convert_types:
                            - str
                            min: 2
                            max: 255
                      sequence_ids:
                        type: dict
                        keys:
                          enabled:
                            type: bool
                            default: true
                          announce:
                            type: int
                            convert_types:
                            - str
                            min: 2
                            max: 255
                            default: 3
                          delay_resp:
                            type: int
                            convert_types:
                            - str
                            min: 2
                            max: 255
                            default: 3
                          follow_up:
                            type: int
                            convert_types:
                            - str
                            min: 2
                            max: 255
                            default: 3
                          sync:
                            type: int
                            convert_types:
                            - str
                            min: 2
                            max: 255
                            default: 3
      node_groups:
        type: list
        convert_types:
        - dict
        primary_key: group
        items:
          $ref: '#/$defs/node_type/keys/defaults'
          type: dict
          keys:
            group:
              type: str
              required: true
              description: 'The Node Group Name is used for MLAG domain unless set
                with ''mlag_domain_id''.

                The Node Group Name is also used for peer description on downstream
                switches'' uplinks.

                '
            nodes:
              $ref: '#/$defs/node_type/keys/nodes'
      nodes:
        type: list
        convert_types:
        - dict
        primary_key: name
        items:
          $ref: '#/$defs/node_type/keys/defaults'
          type: dict
          keys:
            name:
              type: str
              required: true
              description: The Node Name is used as "hostname".
  p2p_links:
    type: list
    items:
      type: dict
      keys:
        id:
          type: int
          convert_types:
          - str
          description: 'Unique id per subnet_summary. Used to calculate ip addresses.

            Required with ip_pool. ID starting from 1.

            '
        speed:
          type: str
          description: The values can be speed or auto speed or forced speed.
        ip_pool:
          type: str
          description: P2P pool name. IP Pool defined under p2p_links_ip_pools. A
            /31 will be taken from the pool per P2P link
        subnet:
          type: str
          description: IPv4 address/Mask. Subnet used on this P2P link.
        ip:
          type: list
          description: Specific IP addresses used on this P2P link.
          items:
            type: str
            description: Node IPv4 address/Mask.
        ipv6_enable:
          type: bool
          default: false
          description: Allows turning on ipv6 for the link or profile (also autodetected
            based on underlay_rfc5549 and include_in_underlay_protocol).
        nodes:
          type: list
          description: Nodes where this link should be configured.
          items:
            type: str
            description: 'The values can be < node_a >, < node_b >.

              ex.- [ core-1-isis-sr-ldp, core-2-ospf-ldp ].

              '
        interfaces:
          type: list
          description: Interfaces where this link should be configured and Required
            unless using port-channels.
          items:
            type: str
            description: 'The value can be like < node_a_interface >, < node_b_interface
              >.

              ex. - [ Ethernet2, Ethernet2 ].

              '
        as:
          type: list
          description: 'AS numbers for BGP.

            Required with bgp peering.

            '
          items:
            type: str
            convert_types:
            - int
            description: The values can be like ["node_a_as", "node_b_as"].
        descriptions:
          type: list
          description: Interface description.
          items:
            type: str
        include_in_underlay_protocol:
          type: bool
          default: true
          description: Add this interface to underlay routing protocol.
        isis_hello_padding:
          type: bool
          default: false
        isis_metric:
          type: int
          convert_types:
          - str
        isis_circuit_type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
        isis_authentication_mode:
          type: str
          valid_values:
          - md5
          - text
        isis_authentication_key:
          type: str
          description: Type-7 encrypted password.
        mpls_ip:
          type: bool
          description: MPLS parameters. Default value is true if switch.mpls_lsr is
            true.
        mpls_ldp:
          type: bool
          description: MPLS parameters. Default value is true for ldp underlay variants,
            otherwise false.
        mtu:
          type: int
          convert_types:
          - str
          description: MTU for this P2P link. Default value same as p2p_uplinks_mtu.
        bfd:
          type: bool
          default: false
          description: Enable BFD (only considered for BGP).
        ptp:
          description: PTP parameters.
          type: dict
          keys:
            enabled:
              type: bool
              default: false
              description: Enable PTP
        qos_profile:
          type: str
          description: QOS service profile.
        macsec_profile:
          type: str
          description: MAC security profile.
        port_channel:
          description: Port-channel parameters.
          type: dict
          keys:
            mode:
              type: str
              default: active
            nodes_child_interfaces:
              type: list
              primary_key: node
              secondary_key: interfaces
              convert_types:
              - dict
              items:
                type: dict
                keys:
                  node:
                    type: str
                    required: true
                  interfaces:
                    type: list
                    description: List of node interfaces. Ex.- [ 'node1 interface1',
                      'node1 interface2' ].
                    items:
                      type: str
        raw_eos_cli:
          type: str
          description: EOS CLI rendered directly on the point-to-point interface in
            the final EOS configuration.
  svi:
    type: dict
    $ref: '#/$defs/svi_settings'
    keys:
      nodes:
        type: list
        primary_key: node
        convert_types:
        - dict
        description: Define node specific configuration, such as unique IP addresses.
        items:
          type: dict
          $ref: '#/$defs/svi_settings'
          keys:
            node:
              type: str
              description: l3_leaf inventory hostname
  svi_settings:
    type: dict
    keys:
      name:
        type: str
        description: VLAN name
      enabled:
        type: bool
        description: Enable or disable interface
      description:
        type: str
        description: 'SVI description. By default set to VLAN name.

          '
      ip_address:
        type: str
        description: IPv4_address/Mask. Usually set under "nodes" to have unique IPv4
          addresses per node.
      ipv6_address:
        type: str
        description: IPv6_address/Mask. Usually set under "nodes" to have unique IPv6
          addresses per node.
      ipv6_enable:
        type: bool
        description: Explicitly enable/disable link-local IPv6 addressing.
      ip_address_virtual:
        type: str
        description: 'IPv4_address/Mask

          IPv4 VXLAN Anycast IP address

          Conserves IP addresses in VXLAN deployments as it doesn''t require unique
          IP addresses on each node.

          '
      ipv6_address_virtual:
        type: str
        description: 'IPv6_address/Mask

          ipv6 address virtuals to configure VXLAN Anycast IP address (Optional)

          The below "ipv6_address_virtual" key will be deprecated in AVD v4.0 in favor
          of the new "ipv6_address_virtuals"

          If both "ipv6_address_virtual" and "ipv6_address_virtuals" are set, all
          addresses will be configured

          '
      ipv6_address_virtuals:
        type: list
        description: 'IPv6 VXLAN Anycast IP addresses

          Conserves IPv6 addresses in VXLAN deployments as it doesn''t require unique
          IPv6 addresses on each node.

          '
        items:
          type: str
          description: IPv6_address/Mask
      ip_address_virtual_secondaries:
        type: list
        description: Secondary IPv4 VXLAN Anycast IP addresses
        items:
          type: str
          description: IPv4_address/Mask
      ip_virtual_router_addresses:
        type: list
        description: 'IPv4 VARP addresses.

          Requires an IP address to be configured on the SVI.

          If ip_address_virtual is also set, ip_virtual_router_addresses will take
          precedence

          _if_ there is an ip_address configured for the node.

          '
        items:
          type: str
          description: 'IPv4_address/Mask or IPv4_address

            IPv4_address/Mask will also configure a static route to the SVI per best
            practice.

            '
      ipv6_virtual_router_addresses:
        type: list
        description: 'IPv6 VARP addresses.

          Requires an IPv6 address to be configured on the SVI.

          If ipv6_address_virtuals is also set, ipv6_virtual_router_addresses will
          take precedence

          _if_ there is an ipv6_address configured for the node.

          '
        items:
          type: str
          description: IPv6_address
      ip_helpers:
        type: list
        primary_key: ip_helper
        convert_types:
        - dict
        description: IP helper for DHCP relay
        items:
          type: dict
          keys:
            ip_helper:
              type: str
              description: IPv4 DHCP server IP
            source_interface:
              type: str
              description: Interface name to originate DHCP relay packets to DHCP
                server.
            source_vrf:
              type: str
              description: VRF to originate DHCP relay packets to DHCP server. If
                not set, EOS uses the VRF on the SVI.
      vni_override:
        type: int
        convert_types:
        - str
        min: 1
        max: 16777215
        description: 'By default the VNI will be derived from "mac_vrf_vni_base"

          The vni_override allows us to override this value and statically define
          it (optional)

          '
      rt_override:
        type: int
        convert_types:
        - str
        min: 1
        max: 16777215
        description: 'By default the MAC VRF RD/RT ID will be derived from "mac_vrf_id_base"

          The rt_override allows us to override this value and statically define it
          (optional)

          If not set, vni_override will be used.

          '
      tags:
        type: list
        description: 'Tags leveraged for networks services filtering

          Tags are matched against "filter.tags" defined under Fabric Topology variables

          Tags are also matched against the "node_group" name under Fabric Topology
          variables

          '
        default:
        - all
        items:
          type: str
          convert_types:
          - int
          description: Tag value
      trunk_groups:
        type: list
        items:
          type: str
          description: 'Trunk groups are used for limiting vlans to trunk ports assigned
            to the same trunk group

            Requires "enable_trunk_groups: true"

            '
      evpn_l2_multicast:
        type: dict
        description: 'Explicitly enable or disable evpn_l2_multicast to override setting
          of `<network_services_key>.[].evpn_l2_multicast.enabled`.

          When evpn_l2_multicast.enabled is set to true for a vlan or a tenant, "igmp
          snooping" and "igmp snooping querier" will always be enabled, overriding
          those individual settings.

          '
        keys:
          enabled:
            type: bool
      evpn_l3_multicast:
        type: dict
        description: 'Explicitly enable or disable evpn_l3_multicast to override setting
          of `<network_services_key>.[].evpn_l3_multicast.enabled` and `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.

          '
        keys:
          enabled:
            type: bool
      igmp_snooping_enabled:
        type: bool
        description: Enable IGMP Snooping (Enabled by default on EOS)
      igmp_snooping_querier:
        type: dict
        keys:
          enabled:
            type: bool
            description: Will be enabled automatically if evpn_l2_multicast is enabled.
          source_address:
            type: str
            description: 'IPv4_address

              If not set, IP address of "Loopback0" will be used.

              '
          version:
            type: int
            description: IGMP Version (By default EOS uses IGMP version 2 for IGMP
              querier)
            convert_types:
            - str
            valid_values:
            - 1
            - 2
            - 3
      vxlan:
        type: bool
        default: true
        description: Extend this SVI over VXLAN
      mtu:
        type: int
        convert_types:
        - str
        description: Interface MTU
      ospf:
        type: dict
        description: OSPF interface configuration
        keys:
          enabled:
            type: bool
          point_to_point:
            type: bool
            default: true
          area:
            type: str
            convert_types:
            - int
            description: OSPF area ID
            default: '0'
          cost:
            type: int
            convert_types:
            - str
            description: OSPF link cost
          authentication:
            type: str
            valid_values:
            - simple
            - message-digest
          simple_auth_key:
            type: str
            description: Password used with simple authentication
          message_digest_keys:
            type: list
            items:
              type: dict
              keys:
                id:
                  type: int
                  convert_types:
                  - str
                hash_algorithm:
                  type: str
                  valid_values:
                  - md5
                  - sha1
                  - sha256
                  - sha384
                  - sha512
                  default: sha512
                key:
                  type: str
                  description: Type 7 encrypted key
      bgp:
        type: dict
        description: 'Structured configuration and EOS CLI commands rendered on router_bgp.vlans

          This configuration will not be applied to vlan aware bundles

          '
        keys:
          structured_config:
            type: dict
            description: 'Custom structured config added under vlan_interfaces.<interface>
              for eos_cli_config_gen.

              Overrides the setting on SVI level.

              '
          raw_eos_cli:
            type: str
            description: 'EOS CLI rendered directly on the VLAN interface in the final
              EOS configuration

              Overrides the setting on SVI level.

              '
      raw_eos_cli:
        type: str
        description: 'EOS CLI rendered directly on the VLAN interface in the final
          EOS configuration

          Overrides the setting on SVI level

          '
      structured_config:
        type: dict
        description: 'Custom structured config added under vlan_interfaces.<interface>
          for eos_cli_config_gen.

          Overrides the setting on SVI level.'
